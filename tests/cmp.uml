
let 
    fun my () = 2
	
    fun not true = false
      | not false = true
in

    (* XXX also should check negative/positive
       stuff since those are separate cases in
       the backend! *)
    if (putc ?a; my () < (my () + 1))
       andalso 
       (putc ?b; not ((my () + 1) < my ()))
       andalso
       (putc ?c; my() + 1 > my ())
       andalso
       (putc ?d; my () <= my ())
       andalso
       (putc ?e; my () >= my ())
       andalso
       (putc ?f; my() + 1 >= my ())
       andalso
       (putc ?g; my () = my ())
       andalso
       (putc ?h; not (my () + 1 = my ()))
       andalso
       (putc ?i; not (my () >= my () + 1))
       andalso
       (putc ?j; not (my () + 1 <= my ()))
    then
	let in
	    putc ?\n;
	    putc ?o; putc ?k; 
	    putc ?!;
	    ()
	end
    else
	let in
	    putc ?\n;
	    putc ?n; putc ?o; 
	    putc ?!;
	    ()
	end;

    putc ?\n
end

(* easier
let 
    fun my () = 2
in

    if (my () + 1) < my ()
    then
	let in
	    putc ?n; putc ?o; ()
	end
    else
	let in
	    putc ?o; putc ?k; ()
	end;

    putc ?\n
end
*)

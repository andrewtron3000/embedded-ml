let
  import "std.uh"
  import "list.uh"
  import "string.uh"
  import "int.uh"
  import "threads.uh"
  import "futures.uh"
  import "queues.uh"
  import "tasks.uh"

  val f = future-create ()

  val task-a-queue = queue-create ()

  exception Command-message of (char array * int future)
  fun task-a-rx-f m =
      case m of Command-message (a, f) =>
                ( print [got command: [a]\n\r];
                  future-complete f 1 )
              | _ => ()

  fun send-command c =
      let
          val f = future-create ()
          do queue-send task-a-queue (Command-message (c, f))
      in
          f
      end

  fun task0 () =
      let
          val f = send-command "bzzt"
          val () = print "ste 1 is here\n\r"
          val () = print [wh! got [int-tostring (future-force f)]\n\r]
          val () = print "ste 2 is here\n\r"
      in
          ()
      end

  fun task1 () =
      let
          val () = print "step 1 is here\n\r"
          val () = print [woho! got [int-tostring (future-force f)]\n\r]
          val () = print "step 2 is here\n\r"
      in
          ()
      end

  fun task1a () =
      let
          val () = print "gott here\n\r"
      in
          ()
      end

  fun task2 () = 
      let
          val () = print "stepp 1 is here\n\r"
          val cf = future-complete f
          val () = print "stepp 2 is here\n\r"
      in
          cf 69
      end

  do fork task2
  do fork task1a
  do fork task1
  do fork task0

  fun idle () = ( yield () ; idle () )
in
    ( task-create task-a-queue task-a-rx-f;
      idle () )
end

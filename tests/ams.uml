let
    import "std.uh"
    import "list.uh"
    import "string.uh"
    import "int.uh"
    import "array.uh"
    import "char.uh"
    import "growarray.uh"
    import "clock.uh"
    import "map.uh"
    import "marshall.uh"
    import "ams-pkts.uh"
    import "ams-states.uh"
    import "ams.uh"
    import "descriptorio.uh"
    import "socket.uh"
    import "threads.uh"
    import "queues.uh"
    import "messagequeues.uh"
    import "futures.uh"
    import "activeobject.uh"

    fun AAMSSender dv ds = 
        let
            val hs = chars-tohexstring ds
        in
            print [AAMS Sender [dv]: [hs]\n]
        end

    fun MAMSSender dv ds = 
        let
            val hs = chars-tohexstring ds
        in
            print [MAMS Sender [dv]: [hs]\n]
        end

    val cs = { mams_endpoint_name = "test=123:4",
               delivery_vector_list = {| { delivery_vector_num = 1,
                                           number_delivery_point_names = 1,
                                           delivery_point_names = "test=1:1" } |} }

    val initial_state = { app_name = "myapp",
                          auth_name = "myauth",
                          desired_transport = "test",
                          aams_sender = AAMSSender,
                          mams_sender = MAMSSender,
                          contact_summary = cs,
                          subscriptions = nil,
                          subject_to_nodes_map = map-create (fn desiredk (k1, d1) => desiredk = k1),
                          node_to_contact_summary_map = map-create (fn desiredk (k1, d1) => desiredk = k1), 
                          node_to_heartbeat_map = map-create (fn desiredk (k1, d1) => desiredk = k1), 
                          node_id = 0xa5,
                          query_number = 0,
                          role = 1,
                          state = MAMS_WAITING_FOR_REGISTRAR,
                          unit = 1,
                          last_registrar_hb_time = clock-gettime (),
                          registrar_dead = true,
                          mams_endpoint = "test=12345:44",
                          venture = 1 }
 
    val ams = activeobject-create ams-process-function initial_state

    val hbs = array-map chr {| 0x01, 0x01, 0x00, 0x01, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x00 |}

    val iahs = array-map chr {| 0x16, 0x01, 0x00, 0x01, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0xa5, 0x64, 0x75, 0x64, 0x70, 0x3d, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x3a, 0x36, 0x39, 0x36, 0x39, 0x00, 0x01, 0x11, 0x75, 0x64, 0x70, 0x3d, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x3a, 0x36, 0x39, 0x37, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00 |}

in
    ( future-force (ams (AMSRegister ("app", "auth", (* unit *) 1, (* role *) 100))) ;
      future-force (ams (AMSInboundMAMS hbs)) ;
      future-force (ams (AMSInboundMAMS iahs)) ;
      future-force (ams (AMSTimeTick)) ;
      future-force (ams (AMSUnregister (* node id *) 9)) ;
      print "hi" )
end

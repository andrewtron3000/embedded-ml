let
    import "std.uh"
    import "list.uh"
    import "string.uh"
    import "int.uh"
    import "array.uh"
    import "char.uh"
    import "growarray.uh"
    import "map.uh"
    import "marshall.uh"
    import "ams-pkts.uh"
    import "ams-states.uh"
    import "ams.uh"
    import "descriptorio.uh"
    import "socket.uh"
    import "threads.uh"
    import "queues.uh"
    import "messagequeues.uh"
    import "futures.uh"
    import "activeobject.uh"

    fun AAMSSender ds = 
        let
            val hs = chars-tohexstring ds
        in
            print [AAMS Sender: [hs]\n]
        end

    fun MAMSSender ds = 
        let
            val hs = chars-tohexstring ds
        in
            print [MAMS Sender: [hs]\n]
        end

    val initial_state = { app_name = "myapp",
                          auth_name = "myauth",
                          aams_sender = AAMSSender,
                          mams_sender = MAMSSender,
                          mams_host = "localhost",
                          mams_port = 6969,
                          subject_node_map = nil,
                          node_id = 1001,
                          query_number = 0,
                          role = 1,
                          state = MAMS_WAITING_FOR_YOU_ARE_IN,
                          unit = 1,
                          venture = 1 }
 
    val ams = activeobject-create ams-process-function initial_state

in
    ( future-force (ams (AMSRegister ("app", "auth", (* unit *) 1, (* role *) 100))) ;
      future-force (ams (AMSUnregister (* node id *) 9)) ;
      print "hi" )
end

let
    import "std.uh"
    import "list.uh"
    import "string.uh"
    import "int.uh"
    import "array.uh"
    import "char.uh"
    import "growarray.uh"
    import "map.uh"

    val initial-map = map-create (fn desiredk (k1, d1) => desiredk = k1)

    val m = map-add (1, 100) initial-map
    val m = map-add (1, 101) m
    val m = map-add (1, 102) m
    val m = map-add (2, 200) m

    val t1 = map-lookup 1 m

    fun pis nil = print "\n"
      | pis (i :: is) = ( print [ [int-tostring i] ] ;
                          pis is )

    fun test t =
        case t of 
            SOME ns => pis ns
          | NONE => print [nothing found\n]

in
    (test (map-lookup 1 m) ;
     test (map-lookup 2 m) ;
     test (map-lookup 3 m) )
end

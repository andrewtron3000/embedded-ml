let
    import "std.uh"
    import "list.uh"
    import "string.uh"
    import "int.uh"
    import "array.uh"
    import "char.uh"
    import "priothreads.uh"
    import "queues.uh"
    import "messagequeues.uh"
    import "futures.uh"
    import "activeobject.uh"

    fun task-a-hook (st, m, fu) = 
        ( print [message is: [m] and state is [int-tostring st]\n] ; 
          future-complete fu () ;
          st+1 )

    val aoPriority = 32

    val ao = activeobject-create aoPriority task-a-hook 1

    fun task1 () = ( future-force (ao ("greetings")) ;
                     future-force (ao ("goodbye!")) ;
                     future-force (ao ("hihihi")) )

    val task1Priority = 64
    val () = fork (task1Priority, task1)
in
    resched ()
end

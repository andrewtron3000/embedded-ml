
val require-stream = provide-stream
val require-growarray = provide-growarray
val provide-parse  = ()

type (a, t) parser = t stream * unit cont -> a * t stream

(* Primitive Parsers *)

(* parse-succeed : 'a -> ('a, 'b) parser *)
fun parse-succeed x (ts, k) = (x, ts)
fun parse-fail (_, k) = throw () to k

(* succeed with x if the stream is empty *)
(*
fun parse-done x ((stream-force) Nil, k) = (x, stream-empty)
  | parse-done _ (_,   k) = throw () to k
*)
fun parse-done x (s, k) =
    (case stream-force s of
	 Nil => (x, stream-empty)
       | Cons _ => throw () to k)

fun parse-any (ts, k) =
    (case stream-force ts of
	 Nil => throw () to k
       | Cons (h, t) => (h, t))

(* sequential successful parse *)
fun -- (p, q) (ts, k) =
	 let val (x, ts) = p (ts, k)
	 in
	     q x (ts, k)
	 end

(* sequential failing *)
fun || (p, q) (ts, k) =
    letcc out
    in
	letcc fail
	in
	    throw (p (ts, fail))
	    to out
	end;

	q (ts, k)
    end

fun $ p input = p () input

fun parse-stream p s =
    letcc out
    in
	letcc fail
	in
	    throw SOME let val (item, _) = p (s, fail)
		       in item
		       end
		   to out
	end;
	
	NONE
    end

fun parse-list p l = parse-stream p (stream-fromlist l)
fun parse-string p s = parse-stream p (stream-fromstring s)

fun parse-fix f arg = f (parse-fix f) arg

(*

  fun parsewith s f p ts =
        let val (x,_,_,_) = p (Pos.initpos, ts)
        in s x end
        handle Fail err => f err

  fun push ns p (pos, ts) =
      p (Pos.initpos, Stream.append ns ts)

  fun parse p = parsewith SOME (fn _ => NONE) p

  fun transform p ts =
    let
        fun trans (pos, ts) () =
            let
                val (x, _, pos', ts') = p (pos, ts)
            in
                Stream.Cons (x, Stream.delay (trans (pos', ts')))
            end
            handle Fail err => Stream.Nil
    in
        Stream.delay (trans (Pos.initpos, ts))
    end

end

*)

  infix  2 -- 
  infix  1 ||

(* utilities *)

  infix 4 <<
  infix 4 >>
  infix 2 parse-wth
  infix 2 parse-suchthat
  infix 2 parse-return
(*   infix 2 when *)

  fun && (p, q) = p -- (fn x => q -- (fn y => parse-succeed (x, y)))
  infix 3 &&

  fun parse-wth (p, f) = p -- (fn x => (parse-succeed (f x)))
  fun parse-suchthat (p, g) = p -- (fn x => if g x then parse-succeed x else parse-fail)
  fun parse-return (p, x) = p -- (fn _ => parse-succeed x)
  fun parse-alt (h :: t) = h || parse-alt t
    | parse-alt nil = parse-fail
  fun parse-satisfy g = parse-any parse-suchthat g
  fun parse-opt p = p parse-wth SOME || parse-succeed NONE
  fun << (p, q) = p -- (fn x => q parse-return x)
  fun >> (p, q) = p -- (fn _ => q)

  fun parse-repeat p = parse-fix (fn rep => p && rep parse-wth (op ::) || parse-succeed nil)
  fun parse-repeat1 p = (p && parse-repeat p) parse-wth op ::

  fun parse-separate p q = (p && parse-repeat (q >> p)) parse-wth op::
  fun parse-separate0 p q = parse-separate p q || parse-succeed nil

  fun parse-matching f = parse-any -- (fn ((f) x) => parse-succeed x | _ => parse-fail)

  fun parse-when (p, f) = 
      p -- (fn x => case f x of SOME r => parse-succeed r | NONE => parse-fail)
  infix 2 parse-when

(*
  fun seq ps = foldr (fn (ph,pt) => ph && pt wth op::) (succeed []) ps

  fun maybe f = any -- 
                (fn x => case f x of SOME r => succeed r | _ => fail)

  fun literal t = satisfy (fn t' => t = t')

  fun string ts = seq (List.map literal ts)
  fun oneof ts  = alt (List.map literal ts)

  fun optional f x p = p wth f || succeed x

  fun repeatn n p =
    let
      fun rep 0 () = succeed ()
        | rep n () = second p ($(rep (n - 1)))
    in
      $(rep n)
    end

  fun repeati p = fix (fn rep => p >> rep || succeed ())

  fun join p = p -- (fn q => q)

*)

(***** pre/in/post-fix parsing *****)

datatype associativity = Parse-left | Parse-right | Parse-non

datatype a opr =
    Parse-prefix of int * (a -> a)
  | Parse-infix of associativity * int * (a * a -> a)
  | Parse-postfix of int * (a -> a)

datatype a fixityitem =
    Parse-atm of a
  | Parse-opr of a opr

fun parse-assoc (Parse-prefix _) = Parse-non
  | parse-assoc (Parse-infix(asc,_,_)) = asc
  | parse-assoc (Parse-postfix _) = Parse-non
    
fun parse-prec (Parse-prefix(n,_)) = n
  | parse-prec (Parse-infix(_,n,_)) = n
  | parse-prec (Parse-postfix(n,_)) = n

fun parse-resolvefixity ys =
    let fun resolve (xs,c as Parse-atm _,ys) =
	       next (c::xs,ys)
	  | resolve (xs,c as Parse-opr(Parse-prefix _),ys) =
	       next (c::xs,ys)
	  | resolve (x::nil,c as Parse-opr(Parse-infix _),ys) =
	       next (c::x::nil,ys)
	  | resolve (x::(c' as Parse-opr(f'))::xs,
		     c as Parse-opr(f as Parse-infix _),ys) =
	       if parse-prec(f) > parse-prec(f') 
	       then next (c::x::c'::xs,ys)
	       else if parse-prec(f') > parse-prec(f) 
		    then reduce (x::c'::xs,c::ys)
		    else (case (parse-assoc(f'),parse-assoc(f)) of 
			   (Parse-left,Parse-left) => reduce (x::c'::xs,c::ys)
			 | (Parse-right,Parse-right) => next (c::x::c'::xs,ys)
		         | _ => parse-fail)   (* ambiguous *)
	  | resolve(x::nil,c as Parse-opr(Parse-postfix _),ys) =
	       reduce (c::x::nil,ys)
	  | resolve (x::(c' as Parse-opr(f'))::xs,
		     c as Parse-opr(f as Parse-postfix _),ys) =
	       if parse-prec(f) > parse-prec(f') then reduce (c::x::c'::xs,ys)
	       else if parse-prec(f') > parse-prec(f) then reduce (x::c'::xs,c::ys)
	       else parse-fail     (* ambiguous *)
	  | resolve _ = parse-fail (* atm/opr mismatch *)

	and reduce (Parse-atm(a)::Parse-opr(Parse-prefix(_,cprefix))::xs,ys) =
	       next(Parse-atm(cprefix(a))::xs,ys)
	  | reduce (Parse-atm(a)::Parse-opr(Parse-infix(_,_,cinfix))::Parse-atm(a')::xs,ys) =
	       next(Parse-atm(cinfix(a',a))::xs,ys)
	  | reduce (Parse-opr(Parse-postfix(_,cpostfix))::Parse-atm(a)::xs,ys) =
	       next(Parse-atm(cpostfix(a))::xs,ys)
	  | reduce _ = parse-fail  (* atm/opr mismatch *)

	and next (Parse-atm(a)::nil,nil) = parse-succeed a
	  | next (xs,nil) = reduce(xs,nil)
	  | next (xs,y::ys) = resolve (xs,y,ys)

     in next (nil,ys) 
    end

fun parse-fixity p =
    (parse-repeat1 p) -- (fn ys => parse-resolvefixity ys)


(*

  fun resolvefixityadj cadj cassoc ys =
      let fun resolve (Parse-atm(a)::xs,Parse-atm(a'),ys) =

            (* treat adjacent tokens as if they have an infix operator 
               of high precedence between them -- Tom *)
                 resolve (Parse-atm(a)::xs, Parse-opr(Parse-infix(cassoc, 999, cadj)), 
                          Parse-atm(a')::ys)
            | resolve (xs,Parse-atm(a),ys) =
                 next (Parse-atm(a)::xs,ys)
            | resolve (xs,c as Parse-opr(Parse-prefix _),ys) =
                 next (c::xs,ys)
            | resolve (x::nil,c,ys) =
                 next (c::x::nil,ys)
            | resolve ((c' as Parse-opr _)::xs,c,ys) =
                 reduce (c'::xs,c::ys)
            | resolve (x::(c' as Parse-opr(f'))::xs,c as Parse-opr(f),ys) =
                 if prec(f) > prec(f') then next (c::x::c'::xs,ys)
                 else if prec(f') > prec(f) then reduce (x::c'::xs,c::ys)
                 else (case (assoc(f'),assoc(f))
                         of (Parse-left,Parse-left) => reduce (x::c'::xs,c::ys)
                          | (Parse-right,Parse-right) => next (c::x::c'::xs,ys)
                          | _ => parse-fail)  (* ambiguous *)
            | resolve _ = parse-fail  (* mismatch *)

          and reduce (Parse-atm(a)::Parse-opr(Parse-prefix(_,cprefix))::xs,ys) =
                 next (Parse-atm(cprefix(a))::xs,ys)
            | reduce (Parse-atm(a)::Parse-opr(Parse-infix(_,_,cinfix))::Parse-atm(a')::xs,ys) =
                 next (Parse-atm(cinfix(a',a))::xs,ys)
            | reduce (Parse-opr(Parse-postfix(_,cpostfix))::Parse-atm(a)::xs,ys) =
                 next (Parse-atm(cpostfix(a))::xs,ys)
            | reduce _ = parse-fail  (* mismatch *)

          and next (Parse-atm(a)::nil,nil) = parse-succeed a
            | next (xs,nil) = reduce(xs,nil)
            | next (xs,y::ys) = resolve(xs,y,ys)

       in next (nil,ys) end

  fun parsefixityadj p assoc adj =
      (repeat1 p) -- (resolvefixityadj adj assoc)

*)

(* useful parsers *)

val parse-char-digit = parse-matching 
                        (fn c => 
			 let val n = ord c
			 in
			     if n >= (ord ?0)
				andalso n <= (ord ?9)
			     then n - ord ?0
			     else raise Match
			 end)

(* NOTE: only parses non-neg ints not much more than max *)
val PARSE_MAX_INT = 100000000 
val parse-char-decimal = 
    (parse-repeat1 parse-char-digit)
    -- (fn x =>
	let 
	    fun lton (acc, nil) = parse-succeed acc
	      | lton (acc, h :: t) = 
	        if acc * 10 < PARSE_MAX_INT
		then lton (acc * 10 + h, t)
		else parse-fail
	in
	    lton(0, x)
	end)

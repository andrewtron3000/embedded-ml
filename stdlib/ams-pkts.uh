val provide-ams-pkts = ()
val require-marshall = provide-marshall

(* everything below is autogenerated by marshallgen.py *)
(* DO NOT EDIT *)

val require-marshall = provide-marshall
type subscription_assert_type =
    {
        subject : int,
        continuum : int,
        unit : int,
        role : int,
        delivery_vector_num : int,
        priority : int,
        flow : int
    }
type invitation_assert_type =
    {
        subject : int,
        continuum : int,
        unit : int,
        role : int,
        delivery_vector_num : int,
        priority : int,
        flow : int
    }
type declaration_struct_type =
    {
        subscription_list : subscription_assert_type array,
        invitation_list : invitation_assert_type array
    }
type delivery_vector_type =
    {
        delivery_vector_num : int,
        number_delivery_point_names : int,
        delivery_point_names : string
    }
type contact_summary_type =
    {
        mams_endpoint_name : string,
        delivery_vector_list : delivery_vector_type array
    }
type node_status_type =
    {
        unit : int,
        node_number : int,
        role : int,
        contact_summary : contact_summary_type,
        declaration_struct : declaration_struct_type
    }
type node_numbers_type =
    {
        node_number : int
    }
type cell_descriptor_type =
    {
        unit : int,
        mams_endpoint_name : string
    }
type subscription_cancel_type =
    {
        subject : int,
        continuum : int,
        unit : int,
        role : int
    }
type invitation_cancel_type =
    {
        subject : int,
        continuum : int,
        unit : int,
        role : int
    }
type reconnect_struct_type =
    {
        node_number : int,
        contact_summary : contact_summary_type,
        node_list : node_numbers_type array
    }
type mams_pdu_header_type =
    {
        mams_version : int,
        mams_checksum : int,
        mams_mpdu_type : int,
        mams_sender_venture : int,
        mams_sender_unit : int,
        mams_role : int,
        mams_signature_length : int,
        mams_supp_data_length : int,
        mams_reference : int,
        mams_time_preamble : int,
        mams_time_tag : int
    }
type ams_heartbeat_type =
    {
        mams_pdu_header : mams_pdu_header_type
    }
type ams_registration_type =
    {
        mams_pdu_header : mams_pdu_header_type,
        contact_summary : contact_summary_type
    }
type ams_you_are_in_type =
    {
        mams_pdu_header : mams_pdu_header_type,
        node_number : int
    }
type ams_i_am_starting_type =
    {
        mams_pdu_header : mams_pdu_header_type,
        contact_summary : contact_summary_type
    }
type ams_i_am_here_type =
    {
        mams_pdu_header : mams_pdu_header_type,
        node_status_list : node_status_type array
    }
type ams_subscription_type =
    {
        mams_pdu_header : mams_pdu_header_type,
        subscription_assert : subscription_assert_type
    }
type ams_unsubscribe_type =
    {
        mams_pdu_header : mams_pdu_header_type,
        subscription_cancel : subscription_cancel_type
    }
type ams_registrar_query_type =
    {
        mams_pdu_header : mams_pdu_header_type,
        mams_endpoint_name : string
    }
type ams_cell_spec_type =
    {
        mams_pdu_header : mams_pdu_header_type,
        cell_descriptor : cell_descriptor_type
    }
type aams_pdu_header_type =
    {
        aams_version : int,
        aams_message_type : int,
        aams_priority : int,
        aams_reserved1 : int,
        aams_checksum : int,
        aams_continuum : int,
        aams_unit : int,
        aams_node : int,
        aams_reserved2 : int,
        aams_context : int,
        aams_subject : int,
        aams_app_data_len : int
    }
fun subscription_assert_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (subject, s) = marshall-readnextinteger (s, 2, 0)
            val (continuum, s) = marshall-readnextinteger (s, 2, 0)
            val (unit, s) = marshall-readnextinteger (s, 2, 0)
            val (role, s) = marshall-readnextinteger (s, 1, 0)
            val (delivery_vector_num, s) = marshall-readnextinteger (s, 0, 4)
            val (priority, s) = marshall-readnextinteger (s, 0, 4)
            val (flow, s) = marshall-readnextinteger (s, 1, 0)
        in
            (
                {
                    subject = subject,
                    continuum = continuum,
                    unit = unit,
                    role = role,
                    delivery_vector_num = delivery_vector_num,
                    priority = priority,
                    flow = flow
                },
                s
            )
        end
    in
        (s, r)
    end
fun subscription_assert_fromstring s = subscription_assert_fromstring_cont NONE s handle Subscript => ( print [subscription_assert parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun subscription_assert_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s = marshall-writenextinteger (s, 2, 0, #subject/subscription_assert_type r)
            val s = marshall-writenextinteger (s, 2, 0, #continuum/subscription_assert_type r)
            val s = marshall-writenextinteger (s, 2, 0, #unit/subscription_assert_type r)
            val s = marshall-writenextinteger (s, 1, 0, #role/subscription_assert_type r)
            val s = marshall-writenextinteger (s, 0, 4, #delivery_vector_num/subscription_assert_type r)
            val s = marshall-writenextinteger (s, 0, 4, #priority/subscription_assert_type r)
            val s = marshall-writenextinteger (s, 1, 0, #flow/subscription_assert_type r)
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val subscription_assert_tostring = subscription_assert_tostring_cont NONE 
fun invitation_assert_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (subject, s) = marshall-readnextinteger (s, 2, 0)
            val (continuum, s) = marshall-readnextinteger (s, 2, 0)
            val (unit, s) = marshall-readnextinteger (s, 2, 0)
            val (role, s) = marshall-readnextinteger (s, 1, 0)
            val (delivery_vector_num, s) = marshall-readnextinteger (s, 0, 4)
            val (priority, s) = marshall-readnextinteger (s, 0, 4)
            val (flow, s) = marshall-readnextinteger (s, 1, 0)
        in
            (
                {
                    subject = subject,
                    continuum = continuum,
                    unit = unit,
                    role = role,
                    delivery_vector_num = delivery_vector_num,
                    priority = priority,
                    flow = flow
                },
                s
            )
        end
    in
        (s, r)
    end
fun invitation_assert_fromstring s = invitation_assert_fromstring_cont NONE s handle Subscript => ( print [invitation_assert parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun invitation_assert_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s = marshall-writenextinteger (s, 2, 0, #subject/invitation_assert_type r)
            val s = marshall-writenextinteger (s, 2, 0, #continuum/invitation_assert_type r)
            val s = marshall-writenextinteger (s, 2, 0, #unit/invitation_assert_type r)
            val s = marshall-writenextinteger (s, 1, 0, #role/invitation_assert_type r)
            val s = marshall-writenextinteger (s, 0, 4, #delivery_vector_num/invitation_assert_type r)
            val s = marshall-writenextinteger (s, 0, 4, #priority/invitation_assert_type r)
            val s = marshall-writenextinteger (s, 1, 0, #flow/invitation_assert_type r)
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val invitation_assert_tostring = invitation_assert_tostring_cont NONE 
fun declaration_struct_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (subscription_list, s) =
                let 
                    val (n, s) = marshall-readnextinteger (s, 2, 0) 
                    fun f (i, s) = 
                        let
                            val (subject, s) = marshall-readnextinteger (s, 2, 0)
                            val (continuum, s) = marshall-readnextinteger (s, 2, 0)
                            val (unit, s) = marshall-readnextinteger (s, 2, 0)
                            val (role, s) = marshall-readnextinteger (s, 1, 0)
                            val (delivery_vector_num, s) = marshall-readnextinteger (s, 0, 4)
                            val (priority, s) = marshall-readnextinteger (s, 0, 4)
                            val (flow, s) = marshall-readnextinteger (s, 1, 0)
                        in
                            (
                                {
                                    subject = subject,
                                    continuum = continuum,
                                    unit = unit,
                                    role = role,
                                    delivery_vector_num = delivery_vector_num,
                                    priority = priority,
                                    flow = flow
                                },
                                s
                            )
                        end
                in
                    array-tabulate-st n f s 
                end 
            val (invitation_list, s) =
                let 
                    val (n, s) = marshall-readnextinteger (s, 2, 0) 
                    fun f (i, s) = 
                        let
                            val (subject, s) = marshall-readnextinteger (s, 2, 0)
                            val (continuum, s) = marshall-readnextinteger (s, 2, 0)
                            val (unit, s) = marshall-readnextinteger (s, 2, 0)
                            val (role, s) = marshall-readnextinteger (s, 1, 0)
                            val (delivery_vector_num, s) = marshall-readnextinteger (s, 0, 4)
                            val (priority, s) = marshall-readnextinteger (s, 0, 4)
                            val (flow, s) = marshall-readnextinteger (s, 1, 0)
                        in
                            (
                                {
                                    subject = subject,
                                    continuum = continuum,
                                    unit = unit,
                                    role = role,
                                    delivery_vector_num = delivery_vector_num,
                                    priority = priority,
                                    flow = flow
                                },
                                s
                            )
                        end
                in
                    array-tabulate-st n f s 
                end 
        in
            (
                {
                    subscription_list = subscription_list,
                    invitation_list = invitation_list
                },
                s
            )
        end
    in
        (s, r)
    end
fun declaration_struct_fromstring s = declaration_struct_fromstring_cont NONE s handle Subscript => ( print [declaration_struct parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun declaration_struct_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s =
                let 
                    fun f (r, s) = 
                        let
                            val s = marshall-writenextinteger (s, 2, 0, #subject/subscription_assert_type r)
                            val s = marshall-writenextinteger (s, 2, 0, #continuum/subscription_assert_type r)
                            val s = marshall-writenextinteger (s, 2, 0, #unit/subscription_assert_type r)
                            val s = marshall-writenextinteger (s, 1, 0, #role/subscription_assert_type r)
                            val s = marshall-writenextinteger (s, 0, 4, #delivery_vector_num/subscription_assert_type r)
                            val s = marshall-writenextinteger (s, 0, 4, #priority/subscription_assert_type r)
                            val s = marshall-writenextinteger (s, 1, 0, #flow/subscription_assert_type r)
                        in
                            s
                        end
                    val s = marshall-writenextinteger (s, 2, 0, length (#subscription_list/declaration_struct_type r)) 
                in
                    array-app-st f (#subscription_list/declaration_struct_type r) s 
                end 
            val s =
                let 
                    fun f (r, s) = 
                        let
                            val s = marshall-writenextinteger (s, 2, 0, #subject/invitation_assert_type r)
                            val s = marshall-writenextinteger (s, 2, 0, #continuum/invitation_assert_type r)
                            val s = marshall-writenextinteger (s, 2, 0, #unit/invitation_assert_type r)
                            val s = marshall-writenextinteger (s, 1, 0, #role/invitation_assert_type r)
                            val s = marshall-writenextinteger (s, 0, 4, #delivery_vector_num/invitation_assert_type r)
                            val s = marshall-writenextinteger (s, 0, 4, #priority/invitation_assert_type r)
                            val s = marshall-writenextinteger (s, 1, 0, #flow/invitation_assert_type r)
                        in
                            s
                        end
                    val s = marshall-writenextinteger (s, 2, 0, length (#invitation_list/declaration_struct_type r)) 
                in
                    array-app-st f (#invitation_list/declaration_struct_type r) s 
                end 
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val declaration_struct_tostring = declaration_struct_tostring_cont NONE 
fun delivery_vector_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (delivery_vector_num, s) = marshall-readnextinteger (s, 0, 4)
            val (number_delivery_point_names, s) = marshall-readnextinteger (s, 0, 4)
            val (delivery_point_names, s) = marshall-readnextstring s
        in
            (
                {
                    delivery_vector_num = delivery_vector_num,
                    number_delivery_point_names = number_delivery_point_names,
                    delivery_point_names = delivery_point_names
                },
                s
            )
        end
    in
        (s, r)
    end
fun delivery_vector_fromstring s = delivery_vector_fromstring_cont NONE s handle Subscript => ( print [delivery_vector parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun delivery_vector_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s = marshall-writenextinteger (s, 0, 4, #delivery_vector_num/delivery_vector_type r)
            val s = marshall-writenextinteger (s, 0, 4, #number_delivery_point_names/delivery_vector_type r)
            val s = marshall-writenextstring (s, #delivery_point_names/delivery_vector_type r)
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val delivery_vector_tostring = delivery_vector_tostring_cont NONE 
fun contact_summary_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (mams_endpoint_name, s) = marshall-readnextstring s
            val (delivery_vector_list, s) =
                let 
                    val (n, s) = marshall-readnextinteger (s, 1, 0) 
                    fun f (i, s) = 
                        let
                            val (delivery_vector_num, s) = marshall-readnextinteger (s, 0, 4)
                            val (number_delivery_point_names, s) = marshall-readnextinteger (s, 0, 4)
                            val (delivery_point_names, s) = marshall-readnextstring s
                        in
                            (
                                {
                                    delivery_vector_num = delivery_vector_num,
                                    number_delivery_point_names = number_delivery_point_names,
                                    delivery_point_names = delivery_point_names
                                },
                                s
                            )
                        end
                in
                    array-tabulate-st n f s 
                end 
        in
            (
                {
                    mams_endpoint_name = mams_endpoint_name,
                    delivery_vector_list = delivery_vector_list
                },
                s
            )
        end
    in
        (s, r)
    end
fun contact_summary_fromstring s = contact_summary_fromstring_cont NONE s handle Subscript => ( print [contact_summary parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun contact_summary_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s = marshall-writenextstring (s, #mams_endpoint_name/contact_summary_type r)
            val s =
                let 
                    fun f (r, s) = 
                        let
                            val s = marshall-writenextinteger (s, 0, 4, #delivery_vector_num/delivery_vector_type r)
                            val s = marshall-writenextinteger (s, 0, 4, #number_delivery_point_names/delivery_vector_type r)
                            val s = marshall-writenextstring (s, #delivery_point_names/delivery_vector_type r)
                        in
                            s
                        end
                    val s = marshall-writenextinteger (s, 1, 0, length (#delivery_vector_list/contact_summary_type r)) 
                in
                    array-app-st f (#delivery_vector_list/contact_summary_type r) s 
                end 
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val contact_summary_tostring = contact_summary_tostring_cont NONE 
fun node_status_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (unit, s) = marshall-readnextinteger (s, 2, 0)
            val (node_number, s) = marshall-readnextinteger (s, 1, 0)
            val (role, s) = marshall-readnextinteger (s, 1, 0)
            val (contact_summary, s) =
                let
                    val (mams_endpoint_name, s) = marshall-readnextstring s
                    val (delivery_vector_list, s) =
                        let 
                            val (n, s) = marshall-readnextinteger (s, 1, 0) 
                            fun f (i, s) = 
                                let
                                    val (delivery_vector_num, s) = marshall-readnextinteger (s, 0, 4)
                                    val (number_delivery_point_names, s) = marshall-readnextinteger (s, 0, 4)
                                    val (delivery_point_names, s) = marshall-readnextstring s
                                in
                                    (
                                        {
                                            delivery_vector_num = delivery_vector_num,
                                            number_delivery_point_names = number_delivery_point_names,
                                            delivery_point_names = delivery_point_names
                                        },
                                        s
                                    )
                                end
                        in
                            array-tabulate-st n f s 
                        end 
                in
                    (
                        {
                            mams_endpoint_name = mams_endpoint_name,
                            delivery_vector_list = delivery_vector_list
                        },
                        s
                    )
                end
            val (declaration_struct, s) =
                let
                    val (subscription_list, s) =
                        let 
                            val (n, s) = marshall-readnextinteger (s, 2, 0) 
                            fun f (i, s) = 
                                let
                                    val (subject, s) = marshall-readnextinteger (s, 2, 0)
                                    val (continuum, s) = marshall-readnextinteger (s, 2, 0)
                                    val (unit, s) = marshall-readnextinteger (s, 2, 0)
                                    val (role, s) = marshall-readnextinteger (s, 1, 0)
                                    val (delivery_vector_num, s) = marshall-readnextinteger (s, 0, 4)
                                    val (priority, s) = marshall-readnextinteger (s, 0, 4)
                                    val (flow, s) = marshall-readnextinteger (s, 1, 0)
                                in
                                    (
                                        {
                                            subject = subject,
                                            continuum = continuum,
                                            unit = unit,
                                            role = role,
                                            delivery_vector_num = delivery_vector_num,
                                            priority = priority,
                                            flow = flow
                                        },
                                        s
                                    )
                                end
                        in
                            array-tabulate-st n f s 
                        end 
                    val (invitation_list, s) =
                        let 
                            val (n, s) = marshall-readnextinteger (s, 2, 0) 
                            fun f (i, s) = 
                                let
                                    val (subject, s) = marshall-readnextinteger (s, 2, 0)
                                    val (continuum, s) = marshall-readnextinteger (s, 2, 0)
                                    val (unit, s) = marshall-readnextinteger (s, 2, 0)
                                    val (role, s) = marshall-readnextinteger (s, 1, 0)
                                    val (delivery_vector_num, s) = marshall-readnextinteger (s, 0, 4)
                                    val (priority, s) = marshall-readnextinteger (s, 0, 4)
                                    val (flow, s) = marshall-readnextinteger (s, 1, 0)
                                in
                                    (
                                        {
                                            subject = subject,
                                            continuum = continuum,
                                            unit = unit,
                                            role = role,
                                            delivery_vector_num = delivery_vector_num,
                                            priority = priority,
                                            flow = flow
                                        },
                                        s
                                    )
                                end
                        in
                            array-tabulate-st n f s 
                        end 
                in
                    (
                        {
                            subscription_list = subscription_list,
                            invitation_list = invitation_list
                        },
                        s
                    )
                end
        in
            (
                {
                    unit = unit,
                    node_number = node_number,
                    role = role,
                    contact_summary = contact_summary,
                    declaration_struct = declaration_struct
                },
                s
            )
        end
    in
        (s, r)
    end
fun node_status_fromstring s = node_status_fromstring_cont NONE s handle Subscript => ( print [node_status parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun node_status_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s = marshall-writenextinteger (s, 2, 0, #unit/node_status_type r)
            val s = marshall-writenextinteger (s, 1, 0, #node_number/node_status_type r)
            val s = marshall-writenextinteger (s, 1, 0, #role/node_status_type r)
            val s =
                let
                    val r = #contact_summary/node_status_type r
                    val s = marshall-writenextstring (s, #mams_endpoint_name/contact_summary_type r)
                    val s =
                        let 
                            fun f (r, s) = 
                                let
                                    val s = marshall-writenextinteger (s, 0, 4, #delivery_vector_num/delivery_vector_type r)
                                    val s = marshall-writenextinteger (s, 0, 4, #number_delivery_point_names/delivery_vector_type r)
                                    val s = marshall-writenextstring (s, #delivery_point_names/delivery_vector_type r)
                                in
                                    s
                                end
                            val s = marshall-writenextinteger (s, 1, 0, length (#delivery_vector_list/contact_summary_type r)) 
                        in
                            array-app-st f (#delivery_vector_list/contact_summary_type r) s 
                        end 
                in
                    s
                end
            val s =
                let
                    val r = #declaration_struct/node_status_type r
                    val s =
                        let 
                            fun f (r, s) = 
                                let
                                    val s = marshall-writenextinteger (s, 2, 0, #subject/subscription_assert_type r)
                                    val s = marshall-writenextinteger (s, 2, 0, #continuum/subscription_assert_type r)
                                    val s = marshall-writenextinteger (s, 2, 0, #unit/subscription_assert_type r)
                                    val s = marshall-writenextinteger (s, 1, 0, #role/subscription_assert_type r)
                                    val s = marshall-writenextinteger (s, 0, 4, #delivery_vector_num/subscription_assert_type r)
                                    val s = marshall-writenextinteger (s, 0, 4, #priority/subscription_assert_type r)
                                    val s = marshall-writenextinteger (s, 1, 0, #flow/subscription_assert_type r)
                                in
                                    s
                                end
                            val s = marshall-writenextinteger (s, 2, 0, length (#subscription_list/declaration_struct_type r)) 
                        in
                            array-app-st f (#subscription_list/declaration_struct_type r) s 
                        end 
                    val s =
                        let 
                            fun f (r, s) = 
                                let
                                    val s = marshall-writenextinteger (s, 2, 0, #subject/invitation_assert_type r)
                                    val s = marshall-writenextinteger (s, 2, 0, #continuum/invitation_assert_type r)
                                    val s = marshall-writenextinteger (s, 2, 0, #unit/invitation_assert_type r)
                                    val s = marshall-writenextinteger (s, 1, 0, #role/invitation_assert_type r)
                                    val s = marshall-writenextinteger (s, 0, 4, #delivery_vector_num/invitation_assert_type r)
                                    val s = marshall-writenextinteger (s, 0, 4, #priority/invitation_assert_type r)
                                    val s = marshall-writenextinteger (s, 1, 0, #flow/invitation_assert_type r)
                                in
                                    s
                                end
                            val s = marshall-writenextinteger (s, 2, 0, length (#invitation_list/declaration_struct_type r)) 
                        in
                            array-app-st f (#invitation_list/declaration_struct_type r) s 
                        end 
                in
                    s
                end
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val node_status_tostring = node_status_tostring_cont NONE 
fun node_numbers_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (node_number, s) = marshall-readnextinteger (s, 1, 0)
        in
            (
                {
                    node_number = node_number
                },
                s
            )
        end
    in
        (s, r)
    end
fun node_numbers_fromstring s = node_numbers_fromstring_cont NONE s handle Subscript => ( print [node_numbers parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun node_numbers_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s = marshall-writenextinteger (s, 1, 0, #node_number/node_numbers_type r)
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val node_numbers_tostring = node_numbers_tostring_cont NONE 
fun cell_descriptor_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (unit, s) = marshall-readnextinteger (s, 2, 0)
            val (mams_endpoint_name, s) = marshall-readnextstring s
        in
            (
                {
                    unit = unit,
                    mams_endpoint_name = mams_endpoint_name
                },
                s
            )
        end
    in
        (s, r)
    end
fun cell_descriptor_fromstring s = cell_descriptor_fromstring_cont NONE s handle Subscript => ( print [cell_descriptor parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun cell_descriptor_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s = marshall-writenextinteger (s, 2, 0, #unit/cell_descriptor_type r)
            val s = marshall-writenextstring (s, #mams_endpoint_name/cell_descriptor_type r)
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val cell_descriptor_tostring = cell_descriptor_tostring_cont NONE 
fun subscription_cancel_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (subject, s) = marshall-readnextinteger (s, 2, 0)
            val (continuum, s) = marshall-readnextinteger (s, 2, 0)
            val (unit, s) = marshall-readnextinteger (s, 2, 0)
            val (role, s) = marshall-readnextinteger (s, 1, 0)
        in
            (
                {
                    subject = subject,
                    continuum = continuum,
                    unit = unit,
                    role = role
                },
                s
            )
        end
    in
        (s, r)
    end
fun subscription_cancel_fromstring s = subscription_cancel_fromstring_cont NONE s handle Subscript => ( print [subscription_cancel parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun subscription_cancel_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s = marshall-writenextinteger (s, 2, 0, #subject/subscription_cancel_type r)
            val s = marshall-writenextinteger (s, 2, 0, #continuum/subscription_cancel_type r)
            val s = marshall-writenextinteger (s, 2, 0, #unit/subscription_cancel_type r)
            val s = marshall-writenextinteger (s, 1, 0, #role/subscription_cancel_type r)
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val subscription_cancel_tostring = subscription_cancel_tostring_cont NONE 
fun invitation_cancel_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (subject, s) = marshall-readnextinteger (s, 2, 0)
            val (continuum, s) = marshall-readnextinteger (s, 2, 0)
            val (unit, s) = marshall-readnextinteger (s, 2, 0)
            val (role, s) = marshall-readnextinteger (s, 1, 0)
        in
            (
                {
                    subject = subject,
                    continuum = continuum,
                    unit = unit,
                    role = role
                },
                s
            )
        end
    in
        (s, r)
    end
fun invitation_cancel_fromstring s = invitation_cancel_fromstring_cont NONE s handle Subscript => ( print [invitation_cancel parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun invitation_cancel_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s = marshall-writenextinteger (s, 2, 0, #subject/invitation_cancel_type r)
            val s = marshall-writenextinteger (s, 2, 0, #continuum/invitation_cancel_type r)
            val s = marshall-writenextinteger (s, 2, 0, #unit/invitation_cancel_type r)
            val s = marshall-writenextinteger (s, 1, 0, #role/invitation_cancel_type r)
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val invitation_cancel_tostring = invitation_cancel_tostring_cont NONE 
fun reconnect_struct_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (node_number, s) = marshall-readnextinteger (s, 1, 0)
            val (contact_summary, s) =
                let
                    val (mams_endpoint_name, s) = marshall-readnextstring s
                    val (delivery_vector_list, s) =
                        let 
                            val (n, s) = marshall-readnextinteger (s, 1, 0) 
                            fun f (i, s) = 
                                let
                                    val (delivery_vector_num, s) = marshall-readnextinteger (s, 0, 4)
                                    val (number_delivery_point_names, s) = marshall-readnextinteger (s, 0, 4)
                                    val (delivery_point_names, s) = marshall-readnextstring s
                                in
                                    (
                                        {
                                            delivery_vector_num = delivery_vector_num,
                                            number_delivery_point_names = number_delivery_point_names,
                                            delivery_point_names = delivery_point_names
                                        },
                                        s
                                    )
                                end
                        in
                            array-tabulate-st n f s 
                        end 
                in
                    (
                        {
                            mams_endpoint_name = mams_endpoint_name,
                            delivery_vector_list = delivery_vector_list
                        },
                        s
                    )
                end
            val (node_list, s) =
                let 
                    val (n, s) = marshall-readnextinteger (s, 1, 0) 
                    fun f (i, s) = 
                        let
                            val (node_number, s) = marshall-readnextinteger (s, 1, 0)
                        in
                            (
                                {
                                    node_number = node_number
                                },
                                s
                            )
                        end
                in
                    array-tabulate-st n f s 
                end 
        in
            (
                {
                    node_number = node_number,
                    contact_summary = contact_summary,
                    node_list = node_list
                },
                s
            )
        end
    in
        (s, r)
    end
fun reconnect_struct_fromstring s = reconnect_struct_fromstring_cont NONE s handle Subscript => ( print [reconnect_struct parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun reconnect_struct_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s = marshall-writenextinteger (s, 1, 0, #node_number/reconnect_struct_type r)
            val s =
                let
                    val r = #contact_summary/reconnect_struct_type r
                    val s = marshall-writenextstring (s, #mams_endpoint_name/contact_summary_type r)
                    val s =
                        let 
                            fun f (r, s) = 
                                let
                                    val s = marshall-writenextinteger (s, 0, 4, #delivery_vector_num/delivery_vector_type r)
                                    val s = marshall-writenextinteger (s, 0, 4, #number_delivery_point_names/delivery_vector_type r)
                                    val s = marshall-writenextstring (s, #delivery_point_names/delivery_vector_type r)
                                in
                                    s
                                end
                            val s = marshall-writenextinteger (s, 1, 0, length (#delivery_vector_list/contact_summary_type r)) 
                        in
                            array-app-st f (#delivery_vector_list/contact_summary_type r) s 
                        end 
                in
                    s
                end
            val s =
                let 
                    fun f (r, s) = 
                        let
                            val s = marshall-writenextinteger (s, 1, 0, #node_number/node_numbers_type r)
                        in
                            s
                        end
                    val s = marshall-writenextinteger (s, 1, 0, length (#node_list/reconnect_struct_type r)) 
                in
                    array-app-st f (#node_list/reconnect_struct_type r) s 
                end 
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val reconnect_struct_tostring = reconnect_struct_tostring_cont NONE 
fun mams_pdu_header_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (mams_version, s) = marshall-readnextinteger (s, 0, 2)
            val (mams_checksum, s) = marshall-readnextinteger (s, 0, 1)
            val (mams_mpdu_type, s) = marshall-readnextinteger (s, 0, 5)
            val (mams_sender_venture, s) = marshall-readnextinteger (s, 1, 0)
            val (mams_sender_unit, s) = marshall-readnextinteger (s, 2, 0)
            val (mams_role, s) = marshall-readnextinteger (s, 1, 0)
            val (mams_signature_length, s) = marshall-readnextinteger (s, 1, 0)
            val (mams_supp_data_length, s) = marshall-readnextinteger (s, 2, 0)
            val (mams_reference, s) = marshall-readnextinteger (s, 4, 0)
            val (mams_time_preamble, s) = marshall-readnextinteger (s, 1, 0)
            val (mams_time_tag, s) = marshall-readnextinteger (s, 4, 0)
        in
            (
                {
                    mams_version = mams_version,
                    mams_checksum = mams_checksum,
                    mams_mpdu_type = mams_mpdu_type,
                    mams_sender_venture = mams_sender_venture,
                    mams_sender_unit = mams_sender_unit,
                    mams_role = mams_role,
                    mams_signature_length = mams_signature_length,
                    mams_supp_data_length = mams_supp_data_length,
                    mams_reference = mams_reference,
                    mams_time_preamble = mams_time_preamble,
                    mams_time_tag = mams_time_tag
                },
                s
            )
        end
    in
        (s, r)
    end
fun mams_pdu_header_fromstring s = mams_pdu_header_fromstring_cont NONE s handle Subscript => ( print [mams_pdu_header parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun mams_pdu_header_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s = marshall-writenextinteger (s, 0, 2, #mams_version/mams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 0, 1, #mams_checksum/mams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 0, 5, #mams_mpdu_type/mams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 1, 0, #mams_sender_venture/mams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 2, 0, #mams_sender_unit/mams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 1, 0, #mams_role/mams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 1, 0, #mams_signature_length/mams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 2, 0, #mams_supp_data_length/mams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 4, 0, #mams_reference/mams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 1, 0, #mams_time_preamble/mams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 4, 0, #mams_time_tag/mams_pdu_header_type r)
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val mams_pdu_header_tostring = mams_pdu_header_tostring_cont NONE 
fun ams_heartbeat_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (mams_pdu_header, s) =
                let
                    val (mams_version, s) = marshall-readnextinteger (s, 0, 2)
                    val (mams_checksum, s) = marshall-readnextinteger (s, 0, 1)
                    val (mams_mpdu_type, s) = marshall-readnextinteger (s, 0, 5)
                    val (mams_sender_venture, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_sender_unit, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_role, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_signature_length, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_supp_data_length, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_reference, s) = marshall-readnextinteger (s, 4, 0)
                    val (mams_time_preamble, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_time_tag, s) = marshall-readnextinteger (s, 4, 0)
                in
                    (
                        {
                            mams_version = mams_version,
                            mams_checksum = mams_checksum,
                            mams_mpdu_type = mams_mpdu_type,
                            mams_sender_venture = mams_sender_venture,
                            mams_sender_unit = mams_sender_unit,
                            mams_role = mams_role,
                            mams_signature_length = mams_signature_length,
                            mams_supp_data_length = mams_supp_data_length,
                            mams_reference = mams_reference,
                            mams_time_preamble = mams_time_preamble,
                            mams_time_tag = mams_time_tag
                        },
                        s
                    )
                end
        in
            (
                {
                    mams_pdu_header = mams_pdu_header
                },
                s
            )
        end
    in
        (s, r)
    end
fun ams_heartbeat_fromstring s = ams_heartbeat_fromstring_cont NONE s handle Subscript => ( print [ams_heartbeat parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun ams_heartbeat_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s =
                let
                    val r = #mams_pdu_header/ams_heartbeat_type r
                    val s = marshall-writenextinteger (s, 0, 2, #mams_version/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 1, #mams_checksum/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 5, #mams_mpdu_type/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_sender_venture/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_sender_unit/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_role/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_signature_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_supp_data_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_reference/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_time_preamble/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_time_tag/mams_pdu_header_type r)
                in
                    s
                end
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val ams_heartbeat_tostring = ams_heartbeat_tostring_cont NONE 
fun ams_registration_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (mams_pdu_header, s) =
                let
                    val (mams_version, s) = marshall-readnextinteger (s, 0, 2)
                    val (mams_checksum, s) = marshall-readnextinteger (s, 0, 1)
                    val (mams_mpdu_type, s) = marshall-readnextinteger (s, 0, 5)
                    val (mams_sender_venture, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_sender_unit, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_role, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_signature_length, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_supp_data_length, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_reference, s) = marshall-readnextinteger (s, 4, 0)
                    val (mams_time_preamble, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_time_tag, s) = marshall-readnextinteger (s, 4, 0)
                in
                    (
                        {
                            mams_version = mams_version,
                            mams_checksum = mams_checksum,
                            mams_mpdu_type = mams_mpdu_type,
                            mams_sender_venture = mams_sender_venture,
                            mams_sender_unit = mams_sender_unit,
                            mams_role = mams_role,
                            mams_signature_length = mams_signature_length,
                            mams_supp_data_length = mams_supp_data_length,
                            mams_reference = mams_reference,
                            mams_time_preamble = mams_time_preamble,
                            mams_time_tag = mams_time_tag
                        },
                        s
                    )
                end
            val (contact_summary, s) =
                let
                    val (mams_endpoint_name, s) = marshall-readnextstring s
                    val (delivery_vector_list, s) =
                        let 
                            val (n, s) = marshall-readnextinteger (s, 1, 0) 
                            fun f (i, s) = 
                                let
                                    val (delivery_vector_num, s) = marshall-readnextinteger (s, 0, 4)
                                    val (number_delivery_point_names, s) = marshall-readnextinteger (s, 0, 4)
                                    val (delivery_point_names, s) = marshall-readnextstring s
                                in
                                    (
                                        {
                                            delivery_vector_num = delivery_vector_num,
                                            number_delivery_point_names = number_delivery_point_names,
                                            delivery_point_names = delivery_point_names
                                        },
                                        s
                                    )
                                end
                        in
                            array-tabulate-st n f s 
                        end 
                in
                    (
                        {
                            mams_endpoint_name = mams_endpoint_name,
                            delivery_vector_list = delivery_vector_list
                        },
                        s
                    )
                end
        in
            (
                {
                    mams_pdu_header = mams_pdu_header,
                    contact_summary = contact_summary
                },
                s
            )
        end
    in
        (s, r)
    end
fun ams_registration_fromstring s = ams_registration_fromstring_cont NONE s handle Subscript => ( print [ams_registration parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun ams_registration_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s =
                let
                    val r = #mams_pdu_header/ams_registration_type r
                    val s = marshall-writenextinteger (s, 0, 2, #mams_version/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 1, #mams_checksum/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 5, #mams_mpdu_type/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_sender_venture/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_sender_unit/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_role/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_signature_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_supp_data_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_reference/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_time_preamble/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_time_tag/mams_pdu_header_type r)
                in
                    s
                end
            val s =
                let
                    val r = #contact_summary/ams_registration_type r
                    val s = marshall-writenextstring (s, #mams_endpoint_name/contact_summary_type r)
                    val s =
                        let 
                            fun f (r, s) = 
                                let
                                    val s = marshall-writenextinteger (s, 0, 4, #delivery_vector_num/delivery_vector_type r)
                                    val s = marshall-writenextinteger (s, 0, 4, #number_delivery_point_names/delivery_vector_type r)
                                    val s = marshall-writenextstring (s, #delivery_point_names/delivery_vector_type r)
                                in
                                    s
                                end
                            val s = marshall-writenextinteger (s, 1, 0, length (#delivery_vector_list/contact_summary_type r)) 
                        in
                            array-app-st f (#delivery_vector_list/contact_summary_type r) s 
                        end 
                in
                    s
                end
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val ams_registration_tostring = ams_registration_tostring_cont NONE 
fun ams_you_are_in_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (mams_pdu_header, s) =
                let
                    val (mams_version, s) = marshall-readnextinteger (s, 0, 2)
                    val (mams_checksum, s) = marshall-readnextinteger (s, 0, 1)
                    val (mams_mpdu_type, s) = marshall-readnextinteger (s, 0, 5)
                    val (mams_sender_venture, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_sender_unit, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_role, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_signature_length, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_supp_data_length, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_reference, s) = marshall-readnextinteger (s, 4, 0)
                    val (mams_time_preamble, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_time_tag, s) = marshall-readnextinteger (s, 4, 0)
                in
                    (
                        {
                            mams_version = mams_version,
                            mams_checksum = mams_checksum,
                            mams_mpdu_type = mams_mpdu_type,
                            mams_sender_venture = mams_sender_venture,
                            mams_sender_unit = mams_sender_unit,
                            mams_role = mams_role,
                            mams_signature_length = mams_signature_length,
                            mams_supp_data_length = mams_supp_data_length,
                            mams_reference = mams_reference,
                            mams_time_preamble = mams_time_preamble,
                            mams_time_tag = mams_time_tag
                        },
                        s
                    )
                end
            val (node_number, s) = marshall-readnextinteger (s, 1, 0)
        in
            (
                {
                    mams_pdu_header = mams_pdu_header,
                    node_number = node_number
                },
                s
            )
        end
    in
        (s, r)
    end
fun ams_you_are_in_fromstring s = ams_you_are_in_fromstring_cont NONE s handle Subscript => ( print [ams_you_are_in parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun ams_you_are_in_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s =
                let
                    val r = #mams_pdu_header/ams_you_are_in_type r
                    val s = marshall-writenextinteger (s, 0, 2, #mams_version/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 1, #mams_checksum/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 5, #mams_mpdu_type/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_sender_venture/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_sender_unit/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_role/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_signature_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_supp_data_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_reference/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_time_preamble/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_time_tag/mams_pdu_header_type r)
                in
                    s
                end
            val s = marshall-writenextinteger (s, 1, 0, #node_number/ams_you_are_in_type r)
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val ams_you_are_in_tostring = ams_you_are_in_tostring_cont NONE 
fun ams_i_am_starting_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (mams_pdu_header, s) =
                let
                    val (mams_version, s) = marshall-readnextinteger (s, 0, 2)
                    val (mams_checksum, s) = marshall-readnextinteger (s, 0, 1)
                    val (mams_mpdu_type, s) = marshall-readnextinteger (s, 0, 5)
                    val (mams_sender_venture, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_sender_unit, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_role, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_signature_length, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_supp_data_length, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_reference, s) = marshall-readnextinteger (s, 4, 0)
                    val (mams_time_preamble, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_time_tag, s) = marshall-readnextinteger (s, 4, 0)
                in
                    (
                        {
                            mams_version = mams_version,
                            mams_checksum = mams_checksum,
                            mams_mpdu_type = mams_mpdu_type,
                            mams_sender_venture = mams_sender_venture,
                            mams_sender_unit = mams_sender_unit,
                            mams_role = mams_role,
                            mams_signature_length = mams_signature_length,
                            mams_supp_data_length = mams_supp_data_length,
                            mams_reference = mams_reference,
                            mams_time_preamble = mams_time_preamble,
                            mams_time_tag = mams_time_tag
                        },
                        s
                    )
                end
            val (contact_summary, s) =
                let
                    val (mams_endpoint_name, s) = marshall-readnextstring s
                    val (delivery_vector_list, s) =
                        let 
                            val (n, s) = marshall-readnextinteger (s, 1, 0) 
                            fun f (i, s) = 
                                let
                                    val (delivery_vector_num, s) = marshall-readnextinteger (s, 0, 4)
                                    val (number_delivery_point_names, s) = marshall-readnextinteger (s, 0, 4)
                                    val (delivery_point_names, s) = marshall-readnextstring s
                                in
                                    (
                                        {
                                            delivery_vector_num = delivery_vector_num,
                                            number_delivery_point_names = number_delivery_point_names,
                                            delivery_point_names = delivery_point_names
                                        },
                                        s
                                    )
                                end
                        in
                            array-tabulate-st n f s 
                        end 
                in
                    (
                        {
                            mams_endpoint_name = mams_endpoint_name,
                            delivery_vector_list = delivery_vector_list
                        },
                        s
                    )
                end
        in
            (
                {
                    mams_pdu_header = mams_pdu_header,
                    contact_summary = contact_summary
                },
                s
            )
        end
    in
        (s, r)
    end
fun ams_i_am_starting_fromstring s = ams_i_am_starting_fromstring_cont NONE s handle Subscript => ( print [ams_i_am_starting parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun ams_i_am_starting_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s =
                let
                    val r = #mams_pdu_header/ams_i_am_starting_type r
                    val s = marshall-writenextinteger (s, 0, 2, #mams_version/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 1, #mams_checksum/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 5, #mams_mpdu_type/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_sender_venture/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_sender_unit/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_role/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_signature_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_supp_data_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_reference/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_time_preamble/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_time_tag/mams_pdu_header_type r)
                in
                    s
                end
            val s =
                let
                    val r = #contact_summary/ams_i_am_starting_type r
                    val s = marshall-writenextstring (s, #mams_endpoint_name/contact_summary_type r)
                    val s =
                        let 
                            fun f (r, s) = 
                                let
                                    val s = marshall-writenextinteger (s, 0, 4, #delivery_vector_num/delivery_vector_type r)
                                    val s = marshall-writenextinteger (s, 0, 4, #number_delivery_point_names/delivery_vector_type r)
                                    val s = marshall-writenextstring (s, #delivery_point_names/delivery_vector_type r)
                                in
                                    s
                                end
                            val s = marshall-writenextinteger (s, 1, 0, length (#delivery_vector_list/contact_summary_type r)) 
                        in
                            array-app-st f (#delivery_vector_list/contact_summary_type r) s 
                        end 
                in
                    s
                end
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val ams_i_am_starting_tostring = ams_i_am_starting_tostring_cont NONE 
fun ams_i_am_here_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (mams_pdu_header, s) =
                let
                    val (mams_version, s) = marshall-readnextinteger (s, 0, 2)
                    val (mams_checksum, s) = marshall-readnextinteger (s, 0, 1)
                    val (mams_mpdu_type, s) = marshall-readnextinteger (s, 0, 5)
                    val (mams_sender_venture, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_sender_unit, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_role, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_signature_length, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_supp_data_length, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_reference, s) = marshall-readnextinteger (s, 4, 0)
                    val (mams_time_preamble, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_time_tag, s) = marshall-readnextinteger (s, 4, 0)
                in
                    (
                        {
                            mams_version = mams_version,
                            mams_checksum = mams_checksum,
                            mams_mpdu_type = mams_mpdu_type,
                            mams_sender_venture = mams_sender_venture,
                            mams_sender_unit = mams_sender_unit,
                            mams_role = mams_role,
                            mams_signature_length = mams_signature_length,
                            mams_supp_data_length = mams_supp_data_length,
                            mams_reference = mams_reference,
                            mams_time_preamble = mams_time_preamble,
                            mams_time_tag = mams_time_tag
                        },
                        s
                    )
                end
            val (node_status_list, s) =
                let 
                    val (n, s) = marshall-readnextinteger (s, 4, 0) 
                    fun f (i, s) = 
                        let
                            val (unit, s) = marshall-readnextinteger (s, 2, 0)
                            val (node_number, s) = marshall-readnextinteger (s, 1, 0)
                            val (role, s) = marshall-readnextinteger (s, 1, 0)
                            val (contact_summary, s) =
                                let
                                    val (mams_endpoint_name, s) = marshall-readnextstring s
                                    val (delivery_vector_list, s) =
                                        let 
                                            val (n, s) = marshall-readnextinteger (s, 1, 0) 
                                            fun f (i, s) = 
                                                let
                                                    val (delivery_vector_num, s) = marshall-readnextinteger (s, 0, 4)
                                                    val (number_delivery_point_names, s) = marshall-readnextinteger (s, 0, 4)
                                                    val (delivery_point_names, s) = marshall-readnextstring s
                                                in
                                                    (
                                                        {
                                                            delivery_vector_num = delivery_vector_num,
                                                            number_delivery_point_names = number_delivery_point_names,
                                                            delivery_point_names = delivery_point_names
                                                        },
                                                        s
                                                    )
                                                end
                                        in
                                            array-tabulate-st n f s 
                                        end 
                                in
                                    (
                                        {
                                            mams_endpoint_name = mams_endpoint_name,
                                            delivery_vector_list = delivery_vector_list
                                        },
                                        s
                                    )
                                end
                            val (declaration_struct, s) =
                                let
                                    val (subscription_list, s) =
                                        let 
                                            val (n, s) = marshall-readnextinteger (s, 2, 0) 
                                            fun f (i, s) = 
                                                let
                                                    val (subject, s) = marshall-readnextinteger (s, 2, 0)
                                                    val (continuum, s) = marshall-readnextinteger (s, 2, 0)
                                                    val (unit, s) = marshall-readnextinteger (s, 2, 0)
                                                    val (role, s) = marshall-readnextinteger (s, 1, 0)
                                                    val (delivery_vector_num, s) = marshall-readnextinteger (s, 0, 4)
                                                    val (priority, s) = marshall-readnextinteger (s, 0, 4)
                                                    val (flow, s) = marshall-readnextinteger (s, 1, 0)
                                                in
                                                    (
                                                        {
                                                            subject = subject,
                                                            continuum = continuum,
                                                            unit = unit,
                                                            role = role,
                                                            delivery_vector_num = delivery_vector_num,
                                                            priority = priority,
                                                            flow = flow
                                                        },
                                                        s
                                                    )
                                                end
                                        in
                                            array-tabulate-st n f s 
                                        end 
                                    val (invitation_list, s) =
                                        let 
                                            val (n, s) = marshall-readnextinteger (s, 2, 0) 
                                            fun f (i, s) = 
                                                let
                                                    val (subject, s) = marshall-readnextinteger (s, 2, 0)
                                                    val (continuum, s) = marshall-readnextinteger (s, 2, 0)
                                                    val (unit, s) = marshall-readnextinteger (s, 2, 0)
                                                    val (role, s) = marshall-readnextinteger (s, 1, 0)
                                                    val (delivery_vector_num, s) = marshall-readnextinteger (s, 0, 4)
                                                    val (priority, s) = marshall-readnextinteger (s, 0, 4)
                                                    val (flow, s) = marshall-readnextinteger (s, 1, 0)
                                                in
                                                    (
                                                        {
                                                            subject = subject,
                                                            continuum = continuum,
                                                            unit = unit,
                                                            role = role,
                                                            delivery_vector_num = delivery_vector_num,
                                                            priority = priority,
                                                            flow = flow
                                                        },
                                                        s
                                                    )
                                                end
                                        in
                                            array-tabulate-st n f s 
                                        end 
                                in
                                    (
                                        {
                                            subscription_list = subscription_list,
                                            invitation_list = invitation_list
                                        },
                                        s
                                    )
                                end
                        in
                            (
                                {
                                    unit = unit,
                                    node_number = node_number,
                                    role = role,
                                    contact_summary = contact_summary,
                                    declaration_struct = declaration_struct
                                },
                                s
                            )
                        end
                in
                    array-tabulate-st n f s 
                end 
        in
            (
                {
                    mams_pdu_header = mams_pdu_header,
                    node_status_list = node_status_list
                },
                s
            )
        end
    in
        (s, r)
    end
fun ams_i_am_here_fromstring s = ams_i_am_here_fromstring_cont NONE s handle Subscript => ( print [ams_i_am_here parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun ams_i_am_here_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s =
                let
                    val r = #mams_pdu_header/ams_i_am_here_type r
                    val s = marshall-writenextinteger (s, 0, 2, #mams_version/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 1, #mams_checksum/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 5, #mams_mpdu_type/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_sender_venture/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_sender_unit/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_role/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_signature_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_supp_data_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_reference/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_time_preamble/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_time_tag/mams_pdu_header_type r)
                in
                    s
                end
            val s =
                let 
                    fun f (r, s) = 
                        let
                            val s = marshall-writenextinteger (s, 2, 0, #unit/node_status_type r)
                            val s = marshall-writenextinteger (s, 1, 0, #node_number/node_status_type r)
                            val s = marshall-writenextinteger (s, 1, 0, #role/node_status_type r)
                            val s =
                                let
                                    val r = #contact_summary/node_status_type r
                                    val s = marshall-writenextstring (s, #mams_endpoint_name/contact_summary_type r)
                                    val s =
                                        let 
                                            fun f (r, s) = 
                                                let
                                                    val s = marshall-writenextinteger (s, 0, 4, #delivery_vector_num/delivery_vector_type r)
                                                    val s = marshall-writenextinteger (s, 0, 4, #number_delivery_point_names/delivery_vector_type r)
                                                    val s = marshall-writenextstring (s, #delivery_point_names/delivery_vector_type r)
                                                in
                                                    s
                                                end
                                            val s = marshall-writenextinteger (s, 1, 0, length (#delivery_vector_list/contact_summary_type r)) 
                                        in
                                            array-app-st f (#delivery_vector_list/contact_summary_type r) s 
                                        end 
                                in
                                    s
                                end
                            val s =
                                let
                                    val r = #declaration_struct/node_status_type r
                                    val s =
                                        let 
                                            fun f (r, s) = 
                                                let
                                                    val s = marshall-writenextinteger (s, 2, 0, #subject/subscription_assert_type r)
                                                    val s = marshall-writenextinteger (s, 2, 0, #continuum/subscription_assert_type r)
                                                    val s = marshall-writenextinteger (s, 2, 0, #unit/subscription_assert_type r)
                                                    val s = marshall-writenextinteger (s, 1, 0, #role/subscription_assert_type r)
                                                    val s = marshall-writenextinteger (s, 0, 4, #delivery_vector_num/subscription_assert_type r)
                                                    val s = marshall-writenextinteger (s, 0, 4, #priority/subscription_assert_type r)
                                                    val s = marshall-writenextinteger (s, 1, 0, #flow/subscription_assert_type r)
                                                in
                                                    s
                                                end
                                            val s = marshall-writenextinteger (s, 2, 0, length (#subscription_list/declaration_struct_type r)) 
                                        in
                                            array-app-st f (#subscription_list/declaration_struct_type r) s 
                                        end 
                                    val s =
                                        let 
                                            fun f (r, s) = 
                                                let
                                                    val s = marshall-writenextinteger (s, 2, 0, #subject/invitation_assert_type r)
                                                    val s = marshall-writenextinteger (s, 2, 0, #continuum/invitation_assert_type r)
                                                    val s = marshall-writenextinteger (s, 2, 0, #unit/invitation_assert_type r)
                                                    val s = marshall-writenextinteger (s, 1, 0, #role/invitation_assert_type r)
                                                    val s = marshall-writenextinteger (s, 0, 4, #delivery_vector_num/invitation_assert_type r)
                                                    val s = marshall-writenextinteger (s, 0, 4, #priority/invitation_assert_type r)
                                                    val s = marshall-writenextinteger (s, 1, 0, #flow/invitation_assert_type r)
                                                in
                                                    s
                                                end
                                            val s = marshall-writenextinteger (s, 2, 0, length (#invitation_list/declaration_struct_type r)) 
                                        in
                                            array-app-st f (#invitation_list/declaration_struct_type r) s 
                                        end 
                                in
                                    s
                                end
                        in
                            s
                        end
                    val s = marshall-writenextinteger (s, 4, 0, length (#node_status_list/ams_i_am_here_type r)) 
                in
                    array-app-st f (#node_status_list/ams_i_am_here_type r) s 
                end 
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val ams_i_am_here_tostring = ams_i_am_here_tostring_cont NONE 
fun ams_subscription_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (mams_pdu_header, s) =
                let
                    val (mams_version, s) = marshall-readnextinteger (s, 0, 2)
                    val (mams_checksum, s) = marshall-readnextinteger (s, 0, 1)
                    val (mams_mpdu_type, s) = marshall-readnextinteger (s, 0, 5)
                    val (mams_sender_venture, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_sender_unit, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_role, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_signature_length, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_supp_data_length, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_reference, s) = marshall-readnextinteger (s, 4, 0)
                    val (mams_time_preamble, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_time_tag, s) = marshall-readnextinteger (s, 4, 0)
                in
                    (
                        {
                            mams_version = mams_version,
                            mams_checksum = mams_checksum,
                            mams_mpdu_type = mams_mpdu_type,
                            mams_sender_venture = mams_sender_venture,
                            mams_sender_unit = mams_sender_unit,
                            mams_role = mams_role,
                            mams_signature_length = mams_signature_length,
                            mams_supp_data_length = mams_supp_data_length,
                            mams_reference = mams_reference,
                            mams_time_preamble = mams_time_preamble,
                            mams_time_tag = mams_time_tag
                        },
                        s
                    )
                end
            val (subscription_assert, s) =
                let
                    val (subject, s) = marshall-readnextinteger (s, 2, 0)
                    val (continuum, s) = marshall-readnextinteger (s, 2, 0)
                    val (unit, s) = marshall-readnextinteger (s, 2, 0)
                    val (role, s) = marshall-readnextinteger (s, 1, 0)
                    val (delivery_vector_num, s) = marshall-readnextinteger (s, 0, 4)
                    val (priority, s) = marshall-readnextinteger (s, 0, 4)
                    val (flow, s) = marshall-readnextinteger (s, 1, 0)
                in
                    (
                        {
                            subject = subject,
                            continuum = continuum,
                            unit = unit,
                            role = role,
                            delivery_vector_num = delivery_vector_num,
                            priority = priority,
                            flow = flow
                        },
                        s
                    )
                end
        in
            (
                {
                    mams_pdu_header = mams_pdu_header,
                    subscription_assert = subscription_assert
                },
                s
            )
        end
    in
        (s, r)
    end
fun ams_subscription_fromstring s = ams_subscription_fromstring_cont NONE s handle Subscript => ( print [ams_subscription parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun ams_subscription_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s =
                let
                    val r = #mams_pdu_header/ams_subscription_type r
                    val s = marshall-writenextinteger (s, 0, 2, #mams_version/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 1, #mams_checksum/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 5, #mams_mpdu_type/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_sender_venture/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_sender_unit/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_role/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_signature_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_supp_data_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_reference/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_time_preamble/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_time_tag/mams_pdu_header_type r)
                in
                    s
                end
            val s =
                let
                    val r = #subscription_assert/ams_subscription_type r
                    val s = marshall-writenextinteger (s, 2, 0, #subject/subscription_assert_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #continuum/subscription_assert_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #unit/subscription_assert_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #role/subscription_assert_type r)
                    val s = marshall-writenextinteger (s, 0, 4, #delivery_vector_num/subscription_assert_type r)
                    val s = marshall-writenextinteger (s, 0, 4, #priority/subscription_assert_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #flow/subscription_assert_type r)
                in
                    s
                end
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val ams_subscription_tostring = ams_subscription_tostring_cont NONE 
fun ams_unsubscribe_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (mams_pdu_header, s) =
                let
                    val (mams_version, s) = marshall-readnextinteger (s, 0, 2)
                    val (mams_checksum, s) = marshall-readnextinteger (s, 0, 1)
                    val (mams_mpdu_type, s) = marshall-readnextinteger (s, 0, 5)
                    val (mams_sender_venture, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_sender_unit, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_role, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_signature_length, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_supp_data_length, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_reference, s) = marshall-readnextinteger (s, 4, 0)
                    val (mams_time_preamble, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_time_tag, s) = marshall-readnextinteger (s, 4, 0)
                in
                    (
                        {
                            mams_version = mams_version,
                            mams_checksum = mams_checksum,
                            mams_mpdu_type = mams_mpdu_type,
                            mams_sender_venture = mams_sender_venture,
                            mams_sender_unit = mams_sender_unit,
                            mams_role = mams_role,
                            mams_signature_length = mams_signature_length,
                            mams_supp_data_length = mams_supp_data_length,
                            mams_reference = mams_reference,
                            mams_time_preamble = mams_time_preamble,
                            mams_time_tag = mams_time_tag
                        },
                        s
                    )
                end
            val (subscription_cancel, s) =
                let
                    val (subject, s) = marshall-readnextinteger (s, 2, 0)
                    val (continuum, s) = marshall-readnextinteger (s, 2, 0)
                    val (unit, s) = marshall-readnextinteger (s, 2, 0)
                    val (role, s) = marshall-readnextinteger (s, 1, 0)
                in
                    (
                        {
                            subject = subject,
                            continuum = continuum,
                            unit = unit,
                            role = role
                        },
                        s
                    )
                end
        in
            (
                {
                    mams_pdu_header = mams_pdu_header,
                    subscription_cancel = subscription_cancel
                },
                s
            )
        end
    in
        (s, r)
    end
fun ams_unsubscribe_fromstring s = ams_unsubscribe_fromstring_cont NONE s handle Subscript => ( print [ams_unsubscribe parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun ams_unsubscribe_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s =
                let
                    val r = #mams_pdu_header/ams_unsubscribe_type r
                    val s = marshall-writenextinteger (s, 0, 2, #mams_version/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 1, #mams_checksum/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 5, #mams_mpdu_type/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_sender_venture/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_sender_unit/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_role/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_signature_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_supp_data_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_reference/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_time_preamble/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_time_tag/mams_pdu_header_type r)
                in
                    s
                end
            val s =
                let
                    val r = #subscription_cancel/ams_unsubscribe_type r
                    val s = marshall-writenextinteger (s, 2, 0, #subject/subscription_cancel_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #continuum/subscription_cancel_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #unit/subscription_cancel_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #role/subscription_cancel_type r)
                in
                    s
                end
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val ams_unsubscribe_tostring = ams_unsubscribe_tostring_cont NONE 
fun ams_registrar_query_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (mams_pdu_header, s) =
                let
                    val (mams_version, s) = marshall-readnextinteger (s, 0, 2)
                    val (mams_checksum, s) = marshall-readnextinteger (s, 0, 1)
                    val (mams_mpdu_type, s) = marshall-readnextinteger (s, 0, 5)
                    val (mams_sender_venture, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_sender_unit, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_role, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_signature_length, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_supp_data_length, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_reference, s) = marshall-readnextinteger (s, 4, 0)
                    val (mams_time_preamble, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_time_tag, s) = marshall-readnextinteger (s, 4, 0)
                in
                    (
                        {
                            mams_version = mams_version,
                            mams_checksum = mams_checksum,
                            mams_mpdu_type = mams_mpdu_type,
                            mams_sender_venture = mams_sender_venture,
                            mams_sender_unit = mams_sender_unit,
                            mams_role = mams_role,
                            mams_signature_length = mams_signature_length,
                            mams_supp_data_length = mams_supp_data_length,
                            mams_reference = mams_reference,
                            mams_time_preamble = mams_time_preamble,
                            mams_time_tag = mams_time_tag
                        },
                        s
                    )
                end
            val (mams_endpoint_name, s) = marshall-readnextstring s
        in
            (
                {
                    mams_pdu_header = mams_pdu_header,
                    mams_endpoint_name = mams_endpoint_name
                },
                s
            )
        end
    in
        (s, r)
    end
fun ams_registrar_query_fromstring s = ams_registrar_query_fromstring_cont NONE s handle Subscript => ( print [ams_registrar_query parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun ams_registrar_query_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s =
                let
                    val r = #mams_pdu_header/ams_registrar_query_type r
                    val s = marshall-writenextinteger (s, 0, 2, #mams_version/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 1, #mams_checksum/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 5, #mams_mpdu_type/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_sender_venture/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_sender_unit/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_role/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_signature_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_supp_data_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_reference/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_time_preamble/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_time_tag/mams_pdu_header_type r)
                in
                    s
                end
            val s = marshall-writenextstring (s, #mams_endpoint_name/ams_registrar_query_type r)
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val ams_registrar_query_tostring = ams_registrar_query_tostring_cont NONE 
fun ams_cell_spec_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (mams_pdu_header, s) =
                let
                    val (mams_version, s) = marshall-readnextinteger (s, 0, 2)
                    val (mams_checksum, s) = marshall-readnextinteger (s, 0, 1)
                    val (mams_mpdu_type, s) = marshall-readnextinteger (s, 0, 5)
                    val (mams_sender_venture, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_sender_unit, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_role, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_signature_length, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_supp_data_length, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_reference, s) = marshall-readnextinteger (s, 4, 0)
                    val (mams_time_preamble, s) = marshall-readnextinteger (s, 1, 0)
                    val (mams_time_tag, s) = marshall-readnextinteger (s, 4, 0)
                in
                    (
                        {
                            mams_version = mams_version,
                            mams_checksum = mams_checksum,
                            mams_mpdu_type = mams_mpdu_type,
                            mams_sender_venture = mams_sender_venture,
                            mams_sender_unit = mams_sender_unit,
                            mams_role = mams_role,
                            mams_signature_length = mams_signature_length,
                            mams_supp_data_length = mams_supp_data_length,
                            mams_reference = mams_reference,
                            mams_time_preamble = mams_time_preamble,
                            mams_time_tag = mams_time_tag
                        },
                        s
                    )
                end
            val (cell_descriptor, s) =
                let
                    val (unit, s) = marshall-readnextinteger (s, 2, 0)
                    val (mams_endpoint_name, s) = marshall-readnextstring s
                in
                    (
                        {
                            unit = unit,
                            mams_endpoint_name = mams_endpoint_name
                        },
                        s
                    )
                end
        in
            (
                {
                    mams_pdu_header = mams_pdu_header,
                    cell_descriptor = cell_descriptor
                },
                s
            )
        end
    in
        (s, r)
    end
fun ams_cell_spec_fromstring s = ams_cell_spec_fromstring_cont NONE s handle Subscript => ( print [ams_cell_spec parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun ams_cell_spec_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s =
                let
                    val r = #mams_pdu_header/ams_cell_spec_type r
                    val s = marshall-writenextinteger (s, 0, 2, #mams_version/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 1, #mams_checksum/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 0, 5, #mams_mpdu_type/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_sender_venture/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_sender_unit/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_role/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_signature_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 2, 0, #mams_supp_data_length/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_reference/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 1, 0, #mams_time_preamble/mams_pdu_header_type r)
                    val s = marshall-writenextinteger (s, 4, 0, #mams_time_tag/mams_pdu_header_type r)
                in
                    s
                end
            val s =
                let
                    val r = #cell_descriptor/ams_cell_spec_type r
                    val s = marshall-writenextinteger (s, 2, 0, #unit/cell_descriptor_type r)
                    val s = marshall-writenextstring (s, #mams_endpoint_name/cell_descriptor_type r)
                in
                    s
                end
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val ams_cell_spec_tostring = ams_cell_spec_tostring_cont NONE 
fun aams_pdu_header_fromstring_cont a s = 
    let 
        val s = case a of NONE => { readbuffer = s, writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val (r, s) =
        let
            val (aams_version, s) = marshall-readnextinteger (s, 0, 2)
            val (aams_message_type, s) = marshall-readnextinteger (s, 0, 2)
            val (aams_priority, s) = marshall-readnextinteger (s, 0, 4)
            val (aams_reserved1, s) = marshall-readnextinteger (s, 1, 0)
            val (aams_checksum, s) = marshall-readnextinteger (s, 0, 1)
            val (aams_continuum, s) = marshall-readnextinteger (s, 0, 15)
            val (aams_unit, s) = marshall-readnextinteger (s, 2, 0)
            val (aams_node, s) = marshall-readnextinteger (s, 1, 0)
            val (aams_reserved2, s) = marshall-readnextinteger (s, 1, 0)
            val (aams_context, s) = marshall-readnextinteger (s, 4, 0)
            val (aams_subject, s) = marshall-readnextinteger (s, 2, 0)
            val (aams_app_data_len, s) = marshall-readnextinteger (s, 2, 0)
        in
            (
                {
                    aams_version = aams_version,
                    aams_message_type = aams_message_type,
                    aams_priority = aams_priority,
                    aams_reserved1 = aams_reserved1,
                    aams_checksum = aams_checksum,
                    aams_continuum = aams_continuum,
                    aams_unit = aams_unit,
                    aams_node = aams_node,
                    aams_reserved2 = aams_reserved2,
                    aams_context = aams_context,
                    aams_subject = aams_subject,
                    aams_app_data_len = aams_app_data_len
                },
                s
            )
        end
    in
        (s, r)
    end
fun aams_pdu_header_fromstring s = aams_pdu_header_fromstring_cont NONE s handle Subscript => ( print [aams_pdu_header parse problem <[chars-tohexstring s]>] ; raise Subscript )
fun aams_pdu_header_tostring_cont a r = 
    let 
        val s = case a of NONE => { readbuffer = array(1, chr 0), writebuffer = growarray-new (chr 0), byte_offset = 0, bit_offset = 0 } 
                        | SOME x => x 
        val s =
        let
            val s = marshall-writenextinteger (s, 0, 2, #aams_version/aams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 0, 2, #aams_message_type/aams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 0, 4, #aams_priority/aams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 1, 0, #aams_reserved1/aams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 0, 1, #aams_checksum/aams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 0, 15, #aams_continuum/aams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 2, 0, #aams_unit/aams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 1, 0, #aams_node/aams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 1, 0, #aams_reserved2/aams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 4, 0, #aams_context/aams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 2, 0, #aams_subject/aams_pdu_header_type r)
            val s = marshall-writenextinteger (s, 2, 0, #aams_app_data_len/aams_pdu_header_type r)
        in
            s
        end
    in
        (s, growarray-subarray ((#writebuffer/marshall_type s), 0, (#byte_offset/marshall_type s)))
    end
val aams_pdu_header_tostring = aams_pdu_header_tostring_cont NONE 


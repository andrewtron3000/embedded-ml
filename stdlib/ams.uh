val require-marshall = provide-marshall
val require-ams-pkts = provide-ams-pkts
val require-ams-state = provide-ams-states
val require-map = provide-map
val require-clock = provide-clock

datatype ams-primitive =
         AMSRegister of string * string * int * int (* app name, auth name, unitID, roleID *)
       | AMSUnregister of int (* node number *)
       | AMSSubscribe of int * int * int * int * int (* subjectID, servicemode, continuumID, unitID, roleID *)
       | AMSUnsubscribe of int * int * int * int (* subjectID, continuumID, unitID, roleID *)
       | AMSPublish of int * int * string (* subjectID, application data length, data *)
       | AMSInboundAAMS of string
       | AMSInboundMAMS of string
       | AMSTimeTick

val AMS_REGISTRATION = 19
val AMS_YOU_ARE_IN = 20
val AMS_I_AM_STARTING = 21
val AMS_HEARTBEAT = 1
val AMS_N3 = (10, 0)

(* ams-process-function : (st, msg) -> (st, result) *)
fun ams-process-function (st, msg) =
    let
        (* this is broken!  needs to deal with 16 bit numbers and the
        array needs to be padded if of an odd size, and checksum
        should be returned or should it be inserted? *)
        fun generate-checksum ds =
            let
                fun upd s idx acc =
                    if idx <= (length s) - 2 then
                        let
                            val x1 = sub(s, idx)
                            val x2 = sub(s, idx + 1)
                        in
                            upd s (idx + 2) acc + x1 + x2
                        end
                    else if idx = length(s) - 1 then
                        let
                            val x1 = sub(s, idx)
                        in
                            (acc + x1) andb 0xffff
                        end
                    else
                       (acc andb 0xffff)
            in
                ( upd ds 0 0 ;
                  ds )
            end

        (* *)
        fun update-seq (x :: xs) st = update-seq xs (ams-update-state x st)
          | update-seq nil st = st

        (* *)
        fun process-registration st (app, auth, u, r) =
            let
                val st = update-seq ( query_number ((#query_number/ams-statetype st) + 1) ::
                                      app_name app ::
                                      auth_name auth ::
                                      unit u ::
                                      role r :: nil ) st

                val h = { mams_version = 0,
                          mams_checksum = 0, 
                          mams_mpdu_type = AMS_REGISTRATION,
                          mams_sender_venture = #venture/ams-statetype st,
                          mams_sender_unit = #unit/ams-statetype st,
                          mams_role = #role/ams-statetype st,
                          mams_signature_length = 0,
                          mams_supp_data_length = 0, (* this will be updated *)
                          mams_reference = #query_number/ams-statetype st,
                          mams_time_tag = 0 }
                val cs = { mams_endpoint_name = "127.0.0.1:6969",
                           delivery_vector_list = {| 
                                                   { delivery_vector_num = 9,
                                                     number_delivery_point_names = 1,
                                                     delivery_point_names = "udp=127.0.0.1:6970" }
                                                  |} }
                val p = { mams_pdu_header = h,
                          contact_summary = cs }
                val (s, ds) = ams_registration_tostring p
            in
                ( (#mams_sender/ams-statetype st) ds ;
                  (st, true) )
            end

        (* *)
        fun extract-mpdu-id ds = (ord (sub(ds, 0))) andb 0x1f

        (* *)
        fun generate-heartbeat st () =
            let
                val st = update-seq ( query_number ((#query_number/ams-statetype st) + 1) :: nil ) st

                val h = { mams_version = 0,
                          mams_checksum = 0, 
                          mams_mpdu_type = AMS_HEARTBEAT,
                          mams_sender_venture = #venture/ams-statetype st,
                          mams_sender_unit = #unit/ams-statetype st,
                          mams_role = #role/ams-statetype st,
                          mams_signature_length = 0,
                          mams_supp_data_length = 0,
                          mams_reference = #query_number/ams-statetype st,
                          mams_time_tag = 0 }
                val hb = { mams_pdu_header = h }
                val (s, ds) = ams_heartbeat_tostring hb
            in
                ( (#mams_sender/ams-statetype st) ds ;
                  (st, true) )
            end

        fun process-time-tick () =
            let
                val curr-time = clock-gettime ()
                val dt = clock-sub curr-time (#last_registrar_hb_time/ams-statetype st) 
            in
                if clock-lt AMS_N3 dt then ams-update-state (registrar_dead true) st else st
            end

        (* *)
        fun process-inbound-mams ds =
            let
                val checksum-valid = true (* SUSP - fix this *)
 
                fun process-youarein ds =
                    let
                        val (s, yai) = ams_you_are_in_fromstring ds
                        val id = (#node_number/ams_you_are_in_type yai)
                        val st = update-seq (state MAMS_YOU_ARE_IN ::
                                             node_id id :: nil) st
                    in
                        (st, true)
                    end

                fun process-iamstarting ds =
                    let
                        val (s, ias) = ams_i_am_starting_fromstring ds
                        val h = #mams_pdu_header/ams_i_am_starting_type ias
                        val cs = #contact_summary/ams_i_am_starting_type ias
                    in
                        (st, true)
                    end

                fun process-heartbeat ds =
                    let
                        val (s, hb) = ams_heartbeat_fromstring ds
                        val h = #mams_pdu_header/ams_heartbeat_type hb
                        val (st1, rc1) = generate-heartbeat st ()
                    in
                        (ams-update-state (last_registrar_hb_time (clock-gettime ())) st1, rc1)
                    end
                                           
            in
                if checksum-valid then 
                    let
                        val mpdu-id = extract-mpdu-id ds
                    in 
                        if mpdu-id = AMS_YOU_ARE_IN then process-youarein ds
                        else if mpdu-id = AMS_I_AM_STARTING then process-iamstarting ds
                        else if mpdu-id = AMS_HEARTBEAT then process-heartbeat ds
                        else (st, false)
                    end
                else (st, false)
            end
    in
        case msg of AMSRegister d =>
                    let
                        val () = print "got a registration\n"
                        val (s1, rc1) = process-registration st d
                    in
                        (s1, rc1)
                    end
                  | AMSUnregister s =>
                    ( print "got an unregistration\n" ;
                      (st, true) )
                  | AMSPublish (s, l, xs) =>
                    ( print "got a publish request\n" ;
                      (st, true) )
                  | AMSInboundMAMS ds =>
                    ( print "inbound mams message\n" ;
                      print [[chars-tohexstring ds]\n] ;
                      process-inbound-mams ds )
                  | AMSTimeTick =>
                    let
                        val () = print "time tick\n"
                        val st' = process-time-tick ()
                    in
                        (st', true)
                    end
                  | _ => 
                    ( print "got some other crap\n" ;
                      (st, true) )
    end

let 
    import "std.uh"
    import "list.uh"
    import "string.uh"
    import "int.uh"
    import "array.uh"
    import "marshall.uh"
    fun readNextString s = ("hi", s)
    fun writeNextString (s, st) = s
    type subscription_assert_type =
        {
            subject : int,
            continuum : int,
            unit : int,
            role : int,
            delivery_vector_num : int,
            priority : int,
            flow : int
        }
    type invitation_assert_type =
        {
            subject : int,
            continuum : int,
            unit : int,
            role : int,
            delivery_vector_num : int,
            priority : int,
            flow : int
        }
    type declaration_struct_type =
        {
            subscription_list : subscription_assert_type array,
            invitation_list : invitation_assert_type array
        }
    type delivery_vector_type =
        {
            delivery_vector_num : int,
            number_delivery_vectors : int,
            delivery_point_names : string
        }
    type contact_summary_type =
        {
            mams_endpoint_name : string,
            delivery_vector_list : delivery_vector_type array
        }
    type node_status_type =
        {
            unit : int,
            node_number : int,
            role : int,
            contact_summary : contact_summary_type,
            declaration_struct : declaration_struct_type
        }
    type node_numbers_type =
        {
            node_number : int
        }
    type cell_descriptor_type =
        {
            unit : int,
            mams_endpoint_name : string
        }
    type subscription_cancellation_type =
        {
            subject : int,
            continuum : int,
            unit : int,
            role : int
        }
    type invitation_cancellation_type =
        {
            subscription_cancellation : subscription_cancellation_type
        }
    type reconnect_struct_type =
        {
            node_number : int,
            contact_summary : contact_summary_type,
            node_list : node_numbers_type array
        }
    fun subscription_assert_fromstring s = 
        let val (r, s) =
            let
                val (subject, s) = readNextInteger (s, 2, 0)
                val (continuum, s) = readNextInteger (s, 3, 0)
                val (unit, s) = readNextInteger (s, 2, 0)
                val (role, s) = readNextInteger (s, 1, 0)
                val (delivery_vector_num, s) = readNextInteger (s, 0, 4)
                val (priority, s) = readNextInteger (s, 0, 4)
                val (flow, s) = readNextInteger (s, 1, 0)
            in
                (
                    {
                        subject = subject,
                        continuum = continuum,
                        unit = unit,
                        role = role,
                        delivery_vector_num = delivery_vector_num,
                        priority = priority,
                        flow = flow
                    },
                    s
                )
            end
        in
            r
        end
    fun subscription_assert_tostring (s, r) = 
        let val s =
            let
                val s = writeNextInteger (s, 2, 0, #subject/subscription_assert_type r)
                val s = writeNextInteger (s, 3, 0, #continuum/subscription_assert_type r)
                val s = writeNextInteger (s, 2, 0, #unit/subscription_assert_type r)
                val s = writeNextInteger (s, 1, 0, #role/subscription_assert_type r)
                val s = writeNextInteger (s, 0, 4, #delivery_vector_num/subscription_assert_type r)
                val s = writeNextInteger (s, 0, 4, #priority/subscription_assert_type r)
                val s = writeNextInteger (s, 1, 0, #flow/subscription_assert_type r)
            in
                s
            end
        in
            ()
        end
    fun invitation_assert_fromstring s = 
        let val (r, s) =
            let
                val (subject, s) = readNextInteger (s, 2, 0)
                val (continuum, s) = readNextInteger (s, 3, 0)
                val (unit, s) = readNextInteger (s, 2, 0)
                val (role, s) = readNextInteger (s, 1, 0)
                val (delivery_vector_num, s) = readNextInteger (s, 0, 4)
                val (priority, s) = readNextInteger (s, 0, 4)
                val (flow, s) = readNextInteger (s, 1, 0)
            in
                (
                    {
                        subject = subject,
                        continuum = continuum,
                        unit = unit,
                        role = role,
                        delivery_vector_num = delivery_vector_num,
                        priority = priority,
                        flow = flow
                    },
                    s
                )
            end
        in
            r
        end
    fun invitation_assert_tostring (s, r) = 
        let val s =
            let
                val s = writeNextInteger (s, 2, 0, #subject/invitation_assert_type r)
                val s = writeNextInteger (s, 3, 0, #continuum/invitation_assert_type r)
                val s = writeNextInteger (s, 2, 0, #unit/invitation_assert_type r)
                val s = writeNextInteger (s, 1, 0, #role/invitation_assert_type r)
                val s = writeNextInteger (s, 0, 4, #delivery_vector_num/invitation_assert_type r)
                val s = writeNextInteger (s, 0, 4, #priority/invitation_assert_type r)
                val s = writeNextInteger (s, 1, 0, #flow/invitation_assert_type r)
            in
                s
            end
        in
            ()
        end
    fun declaration_struct_fromstring s = 
        let val (r, s) =
            let
                val (subscription_list, s) =
                    let 
                        val (n, s) = readNextInteger (s, 2, 0) 
                        fun f (i, s) = 
                            let
                                val (subject, s) = readNextInteger (s, 2, 0)
                                val (continuum, s) = readNextInteger (s, 3, 0)
                                val (unit, s) = readNextInteger (s, 2, 0)
                                val (role, s) = readNextInteger (s, 1, 0)
                                val (delivery_vector_num, s) = readNextInteger (s, 0, 4)
                                val (priority, s) = readNextInteger (s, 0, 4)
                                val (flow, s) = readNextInteger (s, 1, 0)
                            in
                                (
                                    {
                                        subject = subject,
                                        continuum = continuum,
                                        unit = unit,
                                        role = role,
                                        delivery_vector_num = delivery_vector_num,
                                        priority = priority,
                                        flow = flow
                                    },
                                    s
                                )
                            end
                    in
                        array-tabulate-st n f s 
                    end 
                val (invitation_list, s) =
                    let 
                        val (n, s) = readNextInteger (s, 2, 0) 
                        fun f (i, s) = 
                            let
                                val (subject, s) = readNextInteger (s, 2, 0)
                                val (continuum, s) = readNextInteger (s, 3, 0)
                                val (unit, s) = readNextInteger (s, 2, 0)
                                val (role, s) = readNextInteger (s, 1, 0)
                                val (delivery_vector_num, s) = readNextInteger (s, 0, 4)
                                val (priority, s) = readNextInteger (s, 0, 4)
                                val (flow, s) = readNextInteger (s, 1, 0)
                            in
                                (
                                    {
                                        subject = subject,
                                        continuum = continuum,
                                        unit = unit,
                                        role = role,
                                        delivery_vector_num = delivery_vector_num,
                                        priority = priority,
                                        flow = flow
                                    },
                                    s
                                )
                            end
                    in
                        array-tabulate-st n f s 
                    end 
            in
                (
                    {
                        subscription_list = subscription_list,
                        invitation_list = invitation_list
                    },
                    s
                )
            end
        in
            r
        end
    fun declaration_struct_tostring (s, r) = 
        let val s =
            let
                val s =
                    let 
                        fun f (r, s) = 
                            let
                                val s = writeNextInteger (s, 2, 0, #subject/subscription_assert_type r)
                                val s = writeNextInteger (s, 3, 0, #continuum/subscription_assert_type r)
                                val s = writeNextInteger (s, 2, 0, #unit/subscription_assert_type r)
                                val s = writeNextInteger (s, 1, 0, #role/subscription_assert_type r)
                                val s = writeNextInteger (s, 0, 4, #delivery_vector_num/subscription_assert_type r)
                                val s = writeNextInteger (s, 0, 4, #priority/subscription_assert_type r)
                                val s = writeNextInteger (s, 1, 0, #flow/subscription_assert_type r)
                            in
                                s
                            end
                    in
                        array-app-st f (#subscription_list/declaration_struct_type r) s 
                    end 
                val s =
                    let 
                        fun f (r, s) = 
                            let
                                val s = writeNextInteger (s, 2, 0, #subject/invitation_assert_type r)
                                val s = writeNextInteger (s, 3, 0, #continuum/invitation_assert_type r)
                                val s = writeNextInteger (s, 2, 0, #unit/invitation_assert_type r)
                                val s = writeNextInteger (s, 1, 0, #role/invitation_assert_type r)
                                val s = writeNextInteger (s, 0, 4, #delivery_vector_num/invitation_assert_type r)
                                val s = writeNextInteger (s, 0, 4, #priority/invitation_assert_type r)
                                val s = writeNextInteger (s, 1, 0, #flow/invitation_assert_type r)
                            in
                                s
                            end
                    in
                        array-app-st f (#invitation_list/declaration_struct_type r) s 
                    end 
            in
                s
            end
        in
            ()
        end
    fun delivery_vector_fromstring s = 
        let val (r, s) =
            let
                val (delivery_vector_num, s) = readNextInteger (s, 0, 4)
                val (number_delivery_vectors, s) = readNextInteger (s, 0, 4)
                val (delivery_point_names, s) = readNextString s
            in
                (
                    {
                        delivery_vector_num = delivery_vector_num,
                        number_delivery_vectors = number_delivery_vectors,
                        delivery_point_names = delivery_point_names
                    },
                    s
                )
            end
        in
            r
        end
    fun delivery_vector_tostring (s, r) = 
        let val s =
            let
                val s = writeNextInteger (s, 0, 4, #delivery_vector_num/delivery_vector_type r)
                val s = writeNextInteger (s, 0, 4, #number_delivery_vectors/delivery_vector_type r)
                val s = writeNextString (s, #delivery_point_names/delivery_vector_type r)
            in
                s
            end
        in
            ()
        end
    fun contact_summary_fromstring s = 
        let val (r, s) =
            let
                val (mams_endpoint_name, s) = readNextString s
                val (delivery_vector_list, s) =
                    let 
                        val (n, s) = readNextInteger (s, 1, 0) 
                        fun f (i, s) = 
                            let
                                val (delivery_vector_num, s) = readNextInteger (s, 0, 4)
                                val (number_delivery_vectors, s) = readNextInteger (s, 0, 4)
                                val (delivery_point_names, s) = readNextString s
                            in
                                (
                                    {
                                        delivery_vector_num = delivery_vector_num,
                                        number_delivery_vectors = number_delivery_vectors,
                                        delivery_point_names = delivery_point_names
                                    },
                                    s
                                )
                            end
                    in
                        array-tabulate-st n f s 
                    end 
            in
                (
                    {
                        mams_endpoint_name = mams_endpoint_name,
                        delivery_vector_list = delivery_vector_list
                    },
                    s
                )
            end
        in
            r
        end
    fun contact_summary_tostring (s, r) = 
        let val s =
            let
                val s = writeNextString (s, #mams_endpoint_name/contact_summary_type r)
                val s =
                    let 
                        fun f (r, s) = 
                            let
                                val s = writeNextInteger (s, 0, 4, #delivery_vector_num/delivery_vector_type r)
                                val s = writeNextInteger (s, 0, 4, #number_delivery_vectors/delivery_vector_type r)
                                val s = writeNextString (s, #delivery_point_names/delivery_vector_type r)
                            in
                                s
                            end
                    in
                        array-app-st f (#delivery_vector_list/contact_summary_type r) s 
                    end 
            in
                s
            end
        in
            ()
        end
    fun node_status_fromstring s = 
        let val (r, s) =
            let
                val (unit, s) = readNextInteger (s, 2, 0)
                val (node_number, s) = readNextInteger (s, 1, 0)
                val (role, s) = readNextInteger (s, 1, 0)
                val (contact_summary, s) =
                    let
                        val (mams_endpoint_name, s) = readNextString s
                        val (delivery_vector_list, s) =
                            let 
                                val (n, s) = readNextInteger (s, 1, 0) 
                                fun f (i, s) = 
                                    let
                                        val (delivery_vector_num, s) = readNextInteger (s, 0, 4)
                                        val (number_delivery_vectors, s) = readNextInteger (s, 0, 4)
                                        val (delivery_point_names, s) = readNextString s
                                    in
                                        (
                                            {
                                                delivery_vector_num = delivery_vector_num,
                                                number_delivery_vectors = number_delivery_vectors,
                                                delivery_point_names = delivery_point_names
                                            },
                                            s
                                        )
                                    end
                            in
                                array-tabulate-st n f s 
                            end 
                    in
                        (
                            {
                                mams_endpoint_name = mams_endpoint_name,
                                delivery_vector_list = delivery_vector_list
                            },
                            s
                        )
                    end
                val (declaration_struct, s) =
                    let
                        val (subscription_list, s) =
                            let 
                                val (n, s) = readNextInteger (s, 2, 0) 
                                fun f (i, s) = 
                                    let
                                        val (subject, s) = readNextInteger (s, 2, 0)
                                        val (continuum, s) = readNextInteger (s, 3, 0)
                                        val (unit, s) = readNextInteger (s, 2, 0)
                                        val (role, s) = readNextInteger (s, 1, 0)
                                        val (delivery_vector_num, s) = readNextInteger (s, 0, 4)
                                        val (priority, s) = readNextInteger (s, 0, 4)
                                        val (flow, s) = readNextInteger (s, 1, 0)
                                    in
                                        (
                                            {
                                                subject = subject,
                                                continuum = continuum,
                                                unit = unit,
                                                role = role,
                                                delivery_vector_num = delivery_vector_num,
                                                priority = priority,
                                                flow = flow
                                            },
                                            s
                                        )
                                    end
                            in
                                array-tabulate-st n f s 
                            end 
                        val (invitation_list, s) =
                            let 
                                val (n, s) = readNextInteger (s, 2, 0) 
                                fun f (i, s) = 
                                    let
                                        val (subject, s) = readNextInteger (s, 2, 0)
                                        val (continuum, s) = readNextInteger (s, 3, 0)
                                        val (unit, s) = readNextInteger (s, 2, 0)
                                        val (role, s) = readNextInteger (s, 1, 0)
                                        val (delivery_vector_num, s) = readNextInteger (s, 0, 4)
                                        val (priority, s) = readNextInteger (s, 0, 4)
                                        val (flow, s) = readNextInteger (s, 1, 0)
                                    in
                                        (
                                            {
                                                subject = subject,
                                                continuum = continuum,
                                                unit = unit,
                                                role = role,
                                                delivery_vector_num = delivery_vector_num,
                                                priority = priority,
                                                flow = flow
                                            },
                                            s
                                        )
                                    end
                            in
                                array-tabulate-st n f s 
                            end 
                    in
                        (
                            {
                                subscription_list = subscription_list,
                                invitation_list = invitation_list
                            },
                            s
                        )
                    end
            in
                (
                    {
                        unit = unit,
                        node_number = node_number,
                        role = role,
                        contact_summary = contact_summary,
                        declaration_struct = declaration_struct
                    },
                    s
                )
            end
        in
            r
        end
    fun node_status_tostring (s, r) = 
        let val s =
            let
                val s = writeNextInteger (s, 2, 0, #unit/node_status_type r)
                val s = writeNextInteger (s, 1, 0, #node_number/node_status_type r)
                val s = writeNextInteger (s, 1, 0, #role/node_status_type r)
                val s =
                    let
                        val r = #contact_summary/node_status_type r
                        val s = writeNextString (s, #mams_endpoint_name/contact_summary_type r)
                        val s =
                            let 
                                fun f (r, s) = 
                                    let
                                        val s = writeNextInteger (s, 0, 4, #delivery_vector_num/delivery_vector_type r)
                                        val s = writeNextInteger (s, 0, 4, #number_delivery_vectors/delivery_vector_type r)
                                        val s = writeNextString (s, #delivery_point_names/delivery_vector_type r)
                                    in
                                        s
                                    end
                            in
                                array-app-st f (#delivery_vector_list/contact_summary_type r) s 
                            end 
                    in
                        s
                    end
                val s =
                    let
                        val r = #declaration_struct/node_status_type r
                        val s =
                            let 
                                fun f (r, s) = 
                                    let
                                        val s = writeNextInteger (s, 2, 0, #subject/subscription_assert_type r)
                                        val s = writeNextInteger (s, 3, 0, #continuum/subscription_assert_type r)
                                        val s = writeNextInteger (s, 2, 0, #unit/subscription_assert_type r)
                                        val s = writeNextInteger (s, 1, 0, #role/subscription_assert_type r)
                                        val s = writeNextInteger (s, 0, 4, #delivery_vector_num/subscription_assert_type r)
                                        val s = writeNextInteger (s, 0, 4, #priority/subscription_assert_type r)
                                        val s = writeNextInteger (s, 1, 0, #flow/subscription_assert_type r)
                                    in
                                        s
                                    end
                            in
                                array-app-st f (#subscription_list/declaration_struct_type r) s 
                            end 
                        val s =
                            let 
                                fun f (r, s) = 
                                    let
                                        val s = writeNextInteger (s, 2, 0, #subject/invitation_assert_type r)
                                        val s = writeNextInteger (s, 3, 0, #continuum/invitation_assert_type r)
                                        val s = writeNextInteger (s, 2, 0, #unit/invitation_assert_type r)
                                        val s = writeNextInteger (s, 1, 0, #role/invitation_assert_type r)
                                        val s = writeNextInteger (s, 0, 4, #delivery_vector_num/invitation_assert_type r)
                                        val s = writeNextInteger (s, 0, 4, #priority/invitation_assert_type r)
                                        val s = writeNextInteger (s, 1, 0, #flow/invitation_assert_type r)
                                    in
                                        s
                                    end
                            in
                                array-app-st f (#invitation_list/declaration_struct_type r) s 
                            end 
                    in
                        s
                    end
            in
                s
            end
        in
            ()
        end
    fun node_numbers_fromstring s = 
        let val (r, s) =
            let
                val (node_number, s) = readNextInteger (s, 1, 0)
            in
                (
                    {
                        node_number = node_number
                    },
                    s
                )
            end
        in
            r
        end
    fun node_numbers_tostring (s, r) = 
        let val s =
            let
                val s = writeNextInteger (s, 1, 0, #node_number/node_numbers_type r)
            in
                s
            end
        in
            ()
        end
    fun cell_descriptor_fromstring s = 
        let val (r, s) =
            let
                val (unit, s) = readNextInteger (s, 2, 0)
                val (mams_endpoint_name, s) = readNextString s
            in
                (
                    {
                        unit = unit,
                        mams_endpoint_name = mams_endpoint_name
                    },
                    s
                )
            end
        in
            r
        end
    fun cell_descriptor_tostring (s, r) = 
        let val s =
            let
                val s = writeNextInteger (s, 2, 0, #unit/cell_descriptor_type r)
                val s = writeNextString (s, #mams_endpoint_name/cell_descriptor_type r)
            in
                s
            end
        in
            ()
        end
    fun subscription_cancellation_fromstring s = 
        let val (r, s) =
            let
                val (subject, s) = readNextInteger (s, 2, 0)
                val (continuum, s) = readNextInteger (s, 3, 0)
                val (unit, s) = readNextInteger (s, 2, 0)
                val (role, s) = readNextInteger (s, 1, 0)
            in
                (
                    {
                        subject = subject,
                        continuum = continuum,
                        unit = unit,
                        role = role
                    },
                    s
                )
            end
        in
            r
        end
    fun subscription_cancellation_tostring (s, r) = 
        let val s =
            let
                val s = writeNextInteger (s, 2, 0, #subject/subscription_cancellation_type r)
                val s = writeNextInteger (s, 3, 0, #continuum/subscription_cancellation_type r)
                val s = writeNextInteger (s, 2, 0, #unit/subscription_cancellation_type r)
                val s = writeNextInteger (s, 1, 0, #role/subscription_cancellation_type r)
            in
                s
            end
        in
            ()
        end
    fun invitation_cancellation_fromstring s = 
        let val (r, s) =
            let
                val (subscription_cancellation, s) =
                    let
                        val (subject, s) = readNextInteger (s, 2, 0)
                        val (continuum, s) = readNextInteger (s, 3, 0)
                        val (unit, s) = readNextInteger (s, 2, 0)
                        val (role, s) = readNextInteger (s, 1, 0)
                    in
                        (
                            {
                                subject = subject,
                                continuum = continuum,
                                unit = unit,
                                role = role
                            },
                            s
                        )
                    end
            in
                (
                    {
                        subscription_cancellation = subscription_cancellation
                    },
                    s
                )
            end
        in
            r
        end
    fun invitation_cancellation_tostring (s, r) = 
        let val s =
            let
                val s =
                    let
                        val r = #subscription_cancellation/invitation_cancellation_type r
                        val s = writeNextInteger (s, 2, 0, #subject/subscription_cancellation_type r)
                        val s = writeNextInteger (s, 3, 0, #continuum/subscription_cancellation_type r)
                        val s = writeNextInteger (s, 2, 0, #unit/subscription_cancellation_type r)
                        val s = writeNextInteger (s, 1, 0, #role/subscription_cancellation_type r)
                    in
                        s
                    end
            in
                s
            end
        in
            ()
        end
    fun reconnect_struct_fromstring s = 
        let val (r, s) =
            let
                val (node_number, s) = readNextInteger (s, 1, 0)
                val (contact_summary, s) =
                    let
                        val (mams_endpoint_name, s) = readNextString s
                        val (delivery_vector_list, s) =
                            let 
                                val (n, s) = readNextInteger (s, 1, 0) 
                                fun f (i, s) = 
                                    let
                                        val (delivery_vector_num, s) = readNextInteger (s, 0, 4)
                                        val (number_delivery_vectors, s) = readNextInteger (s, 0, 4)
                                        val (delivery_point_names, s) = readNextString s
                                    in
                                        (
                                            {
                                                delivery_vector_num = delivery_vector_num,
                                                number_delivery_vectors = number_delivery_vectors,
                                                delivery_point_names = delivery_point_names
                                            },
                                            s
                                        )
                                    end
                            in
                                array-tabulate-st n f s 
                            end 
                    in
                        (
                            {
                                mams_endpoint_name = mams_endpoint_name,
                                delivery_vector_list = delivery_vector_list
                            },
                            s
                        )
                    end
                val (node_list, s) =
                    let 
                        val (n, s) = readNextInteger (s, 1, 0) 
                        fun f (i, s) = 
                            let
                                val (node_number, s) = readNextInteger (s, 1, 0)
                            in
                                (
                                    {
                                        node_number = node_number
                                    },
                                    s
                                )
                            end
                    in
                        array-tabulate-st n f s 
                    end 
            in
                (
                    {
                        node_number = node_number,
                        contact_summary = contact_summary,
                        node_list = node_list
                    },
                    s
                )
            end
        in
            r
        end
    fun reconnect_struct_tostring (s, r) = 
        let val s =
            let
                val s = writeNextInteger (s, 1, 0, #node_number/reconnect_struct_type r)
                val s =
                    let
                        val r = #contact_summary/reconnect_struct_type r
                        val s = writeNextString (s, #mams_endpoint_name/contact_summary_type r)
                        val s =
                            let 
                                fun f (r, s) = 
                                    let
                                        val s = writeNextInteger (s, 0, 4, #delivery_vector_num/delivery_vector_type r)
                                        val s = writeNextInteger (s, 0, 4, #number_delivery_vectors/delivery_vector_type r)
                                        val s = writeNextString (s, #delivery_point_names/delivery_vector_type r)
                                    in
                                        s
                                    end
                            in
                                array-app-st f (#delivery_vector_list/contact_summary_type r) s 
                            end 
                    in
                        s
                    end
                val s =
                    let 
                        fun f (r, s) = 
                            let
                                val s = writeNextInteger (s, 1, 0, #node_number/node_numbers_type r)
                            in
                                s
                            end
                    in
                        array-app-st f (#node_list/reconnect_struct_type r) s 
                    end 
            in
                s
            end
        in
            ()
        end
in 
    print [hello world\n]
end 


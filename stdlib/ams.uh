val require-char = provide-char
val require-recordpack = provide-recordpack

type ams_assertion =
     {
      subject : int,
      continuum : int,
      unit : int,
      role : int,
      dv_num : int,
      priority : int,
      flow_label : int
     }

(* ams_assertion packlist *)
val ams_assertion_packlist =
(fn r => #subject/ams_assertion r,
 (fn r v => { subject = v,
              continuum = #continuum/ams_assertion r,
              unit = #unit/ams_assertion r,
              role = #role/ams_assertion r,
              dv_num = #dv_num/ams_assertion r,
              priority = #priority/ams_assertion r,
              flow_label = #flow_label/ams_assertion r}),
 BITS16) ::

(fn r => #continuum/ams_assertion r,
 (fn r v => { continuum = v,
              subject = #subject/ams_assertion r,
              unit = #unit/ams_assertion r,
              role = #role/ams_assertion r,
              dv_num = #dv_num/ams_assertion r,
              priority = #priority/ams_assertion r,
              flow_label = #flow_label/ams_assertion r}),
 BITS24) ::

(fn r => #unit/ams_assertion r,
 (fn r v => { unit = v,
              subject = #subject/ams_assertion r,
              continuum = #continuum/ams_assertion r,
              role = #role/ams_assertion r,
              dv_num = #dv_num/ams_assertion r,
              priority = #priority/ams_assertion r,
              flow_label = #flow_label/ams_assertion r}),
 BITS16) ::

(fn r => #role/ams_assertion r,
 (fn r v => { role = v,
              subject = #subject/ams_assertion r,
              continuum = #continuum/ams_assertion r,
              unit = #unit/ams_assertion r,
              dv_num = #dv_num/ams_assertion r,
              priority = #priority/ams_assertion r,
              flow_label = #flow_label/ams_assertion r}),
 BITS8) ::

(fn r => #dv_num/ams_assertion r,
 (fn r v => { dv_num = v,
              subject = #subject/ams_assertion r,
              continuum = #continuum/ams_assertion r,
              unit = #unit/ams_assertion r,
              role = #role/ams_assertion r,
              priority = #priority/ams_assertion r,
              flow_label = #flow_label/ams_assertion r}),
 BITS4) ::

(fn r => #priority/ams_assertion r,
 (fn r v => { priority = v,
              subject = #subject/ams_assertion r,
              continuum = #continuum/ams_assertion r,
              unit = #unit/ams_assertion r,
              role = #role/ams_assertion r,
              dv_num = #dv_num/ams_assertion r,
              flow_label = #flow_label/ams_assertion r}),
 BITS4) ::

(fn r => #flow_label/ams_assertion r,
 (fn r v => { flow_label = v,
              subject = #subject/ams_assertion r,
              continuum = #continuum/ams_assertion r,
              unit = #unit/ams_assertion r,
              role = #role/ams_assertion r,
              dv_num = #dv_num/ams_assertion r,
              priority = #priority/ams_assertion r}),
 BITS8) :: nil

fun ams-assertion-tostring a = recordpack-tostring ams_assertion_packlist a
fun ams-assertion-fromstring s = 
    let
        val r = { subject = 0,
                  continuum = 0,
                  unit = 0,
                  role = 0,
                  dv_num = 0,
                  priority = 0,
                  flow_label = 0 }
    in 
        recordpack-fromstring ams_assertion_packlist s r 
    end

type ams_assertion_list =
     {
      n : int,
      assertions : ams_assertion list
     }

type ams_declaration_struct =
     {
      subscriptions : ams_assertion_list,
      invitations : ams_assertion_list
     }

type ams_mams_endpoint = string

type ams_delivery_name = 
     {
      transport : string,
      endpoint : string
     }

type ams_delivery_vector =
     {
      dv_num : int,
      n : int,
      dv_names : ams_delivery_name list
     }

type ams_delivery_vector_list =
     {
      n : int,
      dvs : ams_delivery_vector list
     }

type ams_contact_summary =
     {
      endpoint : ams_mams_endpoint,
      dvs : ams_delivery_vector_list
     }

type ams_nodestatus =
     {
      unit : int,
      node_number : int,
      role : int,
      contact_summary : string,
      decl_struct : ams_declaration_struct
     }

type ams_nodestatus_list =
     {
      n : int,
      statuses : ams_nodestatus list
     }

type ams_cancellation =
     {
      subject : int,
      continuum : int,
      unit : int,
      role : int 
     }

type ams_node_list =
     {
      n : int,
      nodes : int list
     }

type ams_reconnect =
     {
      node : int,
      contact_summary : string,
      node_list : ams_node_list
     }

type ams_cell_descriptor =
     {
      unit : int,
      mams_endpoint : ams_mams_endpoint
     }





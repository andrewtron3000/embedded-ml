(* sockets interface *)

val require-descriptorio = provide-descriptorio
val provide-socket = ()

(* client calls *)

(* opens a network stream socket *)
native socket-open-tcp = "socketOpenTCP" : unit -> descriptor

(* opens a network datagram socket *)
native socket-open-udp = "socketOpenUDP" : unit -> descriptor

(* converts a hostname to a standard xxx.xxx.xxx.xxx string *)
native socket-gethostbyname = "socketGetHostByName" : string -> string

(* socket-connect <descriptor> <hostname> <port> *)
native socket-connect = "socketConnect" : descriptor * string * int -> unit

(* server calls *)

(* opens a network stream socket *)
native socket-set-nonblocking = "socketSetNonBlocking" : descriptor -> unit

(* socket-bind <descriptor> <port> *)
native socket-bind = "socketBind" : descriptor * int -> unit

(* socket-listen <descriptor> <queuesize> *)
native socket-listen = "socketListen" : descriptor * int -> unit

(* socket-accept <descriptor> *)
native socket-accept = "socketAccept" : descriptor -> descriptor
(* socket-close <descriptor> *)
val socket-close = descriptor-close

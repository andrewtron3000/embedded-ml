val provide-queues = ()
val require-list = provide-list

type a queue = a list * a list

fun queue-normalize (f, r) =
    case (f, r) of (nil, nil) => (nil, nil)
                 | (nil, xs) => (list-rev xs, nil)
                 | (xs, ys) => (xs, ys)

fun queue-create () = (nil, nil)

fun queue-send (front, rear) m = queue-normalize (front, m :: rear)

fun queue-receive q = 
    let
        val (f', b') = queue-normalize q
    in
        case f' of nil => (NONE, (f', b'))
                 | x :: xs => (SOME x, (xs, b'))
    end

fun queue-length (front, rear) = (list-length front) + (list-length rear)

fun queue-purge q = (nil, nil)

fun queue-empty (front, rear) = (list-empty front) andalso (list-empty rear)


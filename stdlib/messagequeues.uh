val provide-messagequeues = ()
val require-queues = provide-queues
val require-threads = provide-threads

(* message queues are useful for intertask communication *)

(* (queue ref, waiter list) *)
type a mqueue = (a queue ref * task list ref)

fun mq-create () = (ref (queue-create ()), ref nil)

fun mq-send (mq, waiters) m = 
    ( mq := queue-send (!mq) m ;
      list-app fork (!waiters) ;
      waiters := nil )
	
fun mq-receive (mq, waiters) = 
    let
        val (v, q') = queue-receive (!mq)
    in
	case v of 
	    SOME x => ( mq := q' ;
			v )
	  | NONE =>
	    let
		fun susp () = letcc k in ( waiters := !waiters @ 
						      ( (fn () => throw () to k) :: nil) ;
					   resched () ) 
                                      end
            in
		(susp () ; mq-receive (mq, waiters) )
	    end
    end
	
fun mq-length mq = queue-length (!mq)

fun mq-empty mq = queue-empty (!mq)

fun mq-purge mq = mq := queue-purge (!mq)

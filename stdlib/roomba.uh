
val require-s0 = provide-s0
val require-list = provide-list
val provide-roomba = ()

exception Roomba of string

type sensors =
  { 
   wheeldrop_caster : bool,
   wheeldrop_left : bool,
   wheeldrop_right : bool, 
   bumper_left : bool, 
   bumper_right : bool, 
   wall : bool,
   cliff_left : bool,
   cliff_front_left : bool,
   cliff_front_right : bool,
   cliff_right : bool, 
   virtual_wall : bool,
   lowside_driver0_overcurrent : bool,
   lowside_driver1_overcurrent : bool,
   lowside_driver2_overcurrent : bool,
   left_wheel_overcurrent : bool,
   right_wheel_overcurrent : bool,
   ir_byte : int,
   advance_pressed : bool,
   play_pressed : bool,
   distance : int,
   angle : int,
   charging_state : int,
   voltage : int,
   current : int,
   batt_temp : int,
   batt_charge : int,
   batt_capacity : int,
   wall_signal : int,
   left_cliff_signal : int,
   front_left_cliff_signal : int,
   front_right_cliff_signal : int,
   right_cliff_signal : int,
   baud_rate_change : bool,
   digital_input_3 : bool,
   digital_input_2 : bool,
   digital_input_1 : bool,
   digital_input_0 : bool,
   user_analog_input : int,
   home_base_powered_and_charging : bool,
   internal_charger_powered_and_charging : bool,
   OI_mode : int,
   song_number : int,
   song_playing : bool,
   num_stream_packets : int,
   requested_velocity : int,
   requested_radius : int,
   requested_right_wheel_velocity : int,
   requested_left_wheel_velocity : int
  }

fun roomba-init () =
    let 
        (* send "start" command and put roomba in "full" mode *)
        do s0-output {| chr 128, chr 132 |}

        (* clear input buffer before continuing *)
        fun clear-buffer () = if avails0 () > 0 then
                                (s0-getc (); clear-buffer ())
                              else print "\n"

        val () = s0-flush ()
    in
      ()
    end

fun roomba-readsensors () =
    let
      (* request group packet id 6 *)
      do s0-output {| chr 142, chr 6 |}
      (* read 52 byte response *)
      val res = s0-inputN 52

      (* test bit i of char c *)
      fun tb (c, i) = ((ord c) andb (1 shl i)) <> 0
      (* test char i of char array a *)
      fun tc (a, i) = (ord (sub(a, i))) <> 0
      (* get byte at index i *)
      val b = (ord o sub)
      (* get 16-bit word at index i *)
      fun w (a, i) = (((ord o sub) (a, i)) shl 8) orb ((ord o sub) (a, i+1))

      (* common in several fields *)
      val bumpsdrops = sub (res, 0)
      val overcurrents = sub (res, 7)
      val buttons = sub (res, 11)
      val digitalinputs = sub (res, 36)
      val chargingsources = sub (res, 39)
      val songplaying = sub (res, 42)
    in
        { 
         wheeldrop_caster = tb (bumpsdrops, 4),
         wheeldrop_left = tb (bumpsdrops, 3),
         wheeldrop_right = tb (bumpsdrops, 2),
         bumper_left = tb (bumpsdrops, 1),
         bumper_right = tb (bumpsdrops, 0),
         wall = tc (res, 1),
         cliff_left = tc (res, 2),
         cliff_front_left = tc (res, 3),
         cliff_front_right = tc (res, 4),
         cliff_right = tc (res, 5),
         virtual_wall = tc (res, 6),
         lowside_driver1_overcurrent = tb (overcurrents, 0),
         lowside_driver0_overcurrent = tb (overcurrents, 1),
         lowside_driver2_overcurrent = tb (overcurrents, 2),
         right_wheel_overcurrent = tb (overcurrents, 3),
         left_wheel_overcurrent = tb (overcurrents, 4),
         ir_byte = b (res, 10),
         play_pressed = tb (buttons, 0),
         advance_pressed = tb (buttons, 2),
         distance = w (res, 12),
         angle = w (res, 14),
         charging_state = b (res, 16),
         voltage = w (res, 17),
         current = w (res, 19),
         batt_temp = b (res, 21),
         batt_charge = w (res, 22),
         batt_capacity = w (res, 24),
         wall_signal = w (res, 26),
         left_cliff_signal = w (res, 28),
         front_left_cliff_signal = w (res, 30),
         front_right_cliff_signal = w (res, 32),
         right_cliff_signal = w (res, 34),
         digital_input_0 = tb (digitalinputs, 0),
         digital_input_1 = tb (digitalinputs, 1),
         digital_input_2 = tb (digitalinputs, 2),
         digital_input_3 = tb (digitalinputs, 3),
         baud_rate_change = tb (digitalinputs, 4),
         user_analog_input = w (res, 37),
         internal_charger_powered_and_charging = tb (chargingsources, 0),
         home_base_powered_and_charging = tb (chargingsources, 1),
         OI_mode = b (res, 40),
         song_number = b (res, 41),
         song_playing = tb (songplaying, 0),
         num_stream_packets = b (res, 43),
         requested_velocity = w (res, 44),
         requested_radius = w (res, 46),
         requested_right_wheel_velocity = w (res, 48),
         requested_left_wheel_velocity = w (res, 50)
        }
    end

val ROOMBA_MAXDRIVE = 500
val ROOMBA_MINDRIVE = ~500

fun roomba-drivedirect (left, right) = 
    let
      (* the roomba expects 16 bit 2's complement values *)
      fun convert i = 
          let 
            do if i > ROOMBA_MAXDRIVE orelse i < ROOMBA_MINDRIVE
               then raise Roomba "drivedirect: value out of range"
               else ()
          in
            (* preserve sign bits! *)
            (chr (((i shr 8) andb 127) orb (if i < 0 then 128 else 0)),
             chr (i andb 255))
          end           

      val (lefthigh, leftlow) = convert left
      val (righthigh, rightlow) = convert right
    in
      (* drive direct *)
      s0-output {| chr 145, righthigh, rightlow, lefthigh, leftlow |}
    end

(* Some simple but useful projections... *)
fun roomba-wheeldrop_caster sens = #wheeldrop_caster/sensors sens
fun roomba-wheeldrop_left sens = #wheeldrop_left/sensors sens
fun roomba-wheeldrop_right sens = #wheeldrop_right/sensors sens
fun roomba-bumper_left sens = #bumper_left/sensors sens
fun roomba-bumper_right sens = #bumper_right/sensors sens
fun roomba-wall sens = #wall/sensors sens


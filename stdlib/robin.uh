val require-list = provide-list
val require-int = provide-int
val require-array = provide-array
val require-queues = provide-queues
val require-messagequeues = provide-messagequeues
val require-tasks = provide-tasks
val provide-robin = ()

type robin-packet = 
     {
      dst : char,
      src : char,
      flags : char,
      len : int,
      data : char array
     }

exception Robin-error of string
exception Robin-message of (int * char array)

val START_CHAR = chr 0xaa
val LEADIN_CHAR = chr 0x99 
val MAX_DATA_LEN = 59

datatype receivestate = 
         START 
       | LEADIN
       | DEST 
       | SRC 
       | FLAGS
       | LEN 
       | DATA of int
       | CKSUM

(* *)
fun robin-compute-checksum pkt = 
    let 
        val d = ord (#dst/robin-packet pkt)
        val s = ord (#src/robin-packet pkt)
        val f = ord (#flags/robin-packet pkt)
        val l = #len/robin-packet pkt
        val hdr = d + s + f + l
        val total = hdr + (array-foldl (fn (x,y) => (ord x) + y) 
                                       0 
                                       (#data/robin-packet pkt))
    in
        chr (total andb 0xff)
    end

(* *)
fun robin-checksum-valid pkt received = 
    let
        val computed = ord (robin-compute-checksum pkt)
    in
        computed = received
    end

(* *)
fun robin-packet-tostring pkt =
    let 
        val dst = int-tohexstring (ord (#dst/robin-packet pkt))
        val src = int-tohexstring (ord (#src/robin-packet pkt))
        val flags = int-tohexstring (ord (#flags/robin-packet pkt))
        val len = int-tohexstring (#len/robin-packet pkt)

        val bytestring = array-foldl (fn (x,l) => l ^ (int-tohexstring (ord x))) 
                                     [] 
                                     (#data/robin-packet pkt)

        val cksum = int-tohexstring (ord (robin-compute-checksum pkt))
    in
        [[dst] [src] [flags] [len] [bytestring] [cksum]]
    end

(* *)
fun robin-send-packet putf pkt =
    let 
        val () = putf START_CHAR
        val () = putf LEADIN_CHAR
        val () = putf (#dst/robin-packet pkt)
        val () = putf (#src/robin-packet pkt)
        val () = putf (#flags/robin-packet pkt)
        val () = putf (chr (#len/robin-packet pkt))
        val () = array-app putf (#data/robin-packet pkt)
        val () = putf (robin-compute-checksum pkt)
    in
        ()
    end

(* *)
fun robin-receive-packet getf () =
    let
        fun robin-receiver state =
            let 
                 val c = getf ()
             in
                case state of 
                    START => if (ord c) = (ord START_CHAR)
                             then robin-receiver LEADIN
                             else robin-receiver START
                  | LEADIN => if (ord c) = (ord LEADIN_CHAR)
                              then robin-receiver DEST
                              else robin-receiver START
                  | DEST => 
                    let 
                        val src = getf ()
                        val flags = getf ()
                        val len = ord (getf ())
                        val ds = array-tabulate len (fn _ => getf ())
                        val cksum = getf ()
                        val pkt = { dst=c, src=src, flags=flags, len=len, data=ds }
                    in
                        if robin-checksum-valid pkt (ord cksum)
                        then pkt
                        else robin-receiver START
                      end
                  | _ => raise Robin-error "receiver confused"
             end
    in
        robin-receiver START
    end

(* *)
fun robin-receiver getf availf targetq () = 
    let
        fun get-robin-char () =
            let
                val n = availf ()
            in
                if (n > 0) then getf () else ( yield () ; get-robin-char () )
            end

        fun get-robin-chars m = 
              array-tabulate m (fn _ => get-robin-char ())

        fun robin-receiver state =
            let 
                val c = get-robin-char ()
             in
                case state of 
                    START => if (ord c) = (ord START_CHAR)
                             then robin-receiver LEADIN
                             else robin-receiver START
                  | LEADIN => if (ord c) = (ord LEADIN_CHAR)
                              then robin-receiver DEST
                              else robin-receiver START
                  | DEST => 
                    let 
                        val src = get-robin-char ()
                        val flags = get-robin-char ()
                        val len = ord (get-robin-char ())
                        val ds = get-robin-chars len
                        val cksum = get-robin-char ()
                        val pkt = { dst=c, src=src, flags=flags, len=len, data=ds }
                    in
                        ( if robin-checksum-valid pkt (ord cksum)
                          then mq-send targetq (Robin-message (ord src, ds))
                          else () ;
                          robin-receiver START )
                      end
                  | _ => raise Robin-error "receiver confused"
             end
    in
        robin-receiver START
    end

fun robin-sender putf (src-id : int) st m =
    let
        fun send-robin-pkt pkt =
            let
                do putf START_CHAR
                do putf LEADIN_CHAR
                do putf (#dst/robin-packet pkt)
                do putf (#src/robin-packet pkt)
                do putf (#flags/robin-packet pkt)
                do putf (chr (#len/robin-packet pkt))
                do array-app putf (#data/robin-packet pkt)
                do putf (robin-compute-checksum pkt)
            in
                ()
            end
    in
        case m of Robin-message (dest, ds) =>
                  let
                      val pkt = { dst=chr dest, src=chr src-id, flags=chr 0, len=length ds, data=ds }
                  in
                      ( send-robin-pkt pkt ;
			st )
                  end
                | _ => st
    end

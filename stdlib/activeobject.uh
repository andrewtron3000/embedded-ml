val require-messagequeues = provide-messagequeues
val require-futures = provide-futures
val require-threads = provide-threads

(* pf : (state, action, future) -> state *)
fun activeobject-create pf initialstate =
    let
        val q = mq-create ()

        fun looper st () =
            let
                val x = mq-receive q
                val st' = case x of NONE => st 
                                  | SOME (fu, a) => pf (st, a, fu)
            in
                ( yield () ;
                  looper st' () )
            end

        fun dispatch a =
            let
                val fu = future-create ()
                val msg = (fu, a)
            in
                ( mq-send q msg ;
                  fu )
            end
    in
        ( fork (looper initialstate)) ;
          dispatch )
    end

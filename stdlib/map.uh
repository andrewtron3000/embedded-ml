val provide-map = ()
val require-list = provide-list

exception Map

type (a, b) map = ( (a -> a -> bool) * ((a * b) list) )

fun map-create keymatchf = (keymatchf, nil)

fun map-add (r as (k, nd)) (keymatchf, m) =
    let
        val (ts, fs) = list-partition (keymatchf k) m
    in
        (keymatchf, r :: fs)
    end

fun map-remove (k, nd) (keymatchf, m) =
    let
        val (ts, fs) = list-partition (keymatchf k) m
    in
        (keymatchf, fs)
    end

fun map-lookup k (keymatchf, m) = 
    let
        val x = list-find (keymatchf k) m
    in
        case x of
            SOME (k, d) => SOME d
          | NONE => NONE
    end

